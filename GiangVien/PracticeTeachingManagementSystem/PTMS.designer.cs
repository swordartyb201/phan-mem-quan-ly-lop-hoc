#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4959
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PracticeTeachingManagementSystem
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="PTMS")]
	public partial class PTMSDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccountPermission(AccountPermission instance);
    partial void UpdateAccountPermission(AccountPermission instance);
    partial void DeleteAccountPermission(AccountPermission instance);
    partial void InsertTrain(Train instance);
    partial void UpdateTrain(Train instance);
    partial void DeleteTrain(Train instance);
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertBranch(Branch instance);
    partial void UpdateBranch(Branch instance);
    partial void DeleteBranch(Branch instance);
    partial void InsertCallRool(CallRool instance);
    partial void UpdateCallRool(CallRool instance);
    partial void DeleteCallRool(CallRool instance);
    partial void InsertChair(Chair instance);
    partial void UpdateChair(Chair instance);
    partial void DeleteChair(Chair instance);
    partial void InsertClass(Class instance);
    partial void UpdateClass(Class instance);
    partial void DeleteClass(Class instance);
    partial void InsertComputerEquipment(ComputerEquipment instance);
    partial void UpdateComputerEquipment(ComputerEquipment instance);
    partial void DeleteComputerEquipment(ComputerEquipment instance);
    partial void InsertComputer(Computer instance);
    partial void UpdateComputer(Computer instance);
    partial void DeleteComputer(Computer instance);
    partial void InsertConfigHaflYear(ConfigHaflYear instance);
    partial void UpdateConfigHaflYear(ConfigHaflYear instance);
    partial void DeleteConfigHaflYear(ConfigHaflYear instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertEquipment(Equipment instance);
    partial void UpdateEquipment(Equipment instance);
    partial void DeleteEquipment(Equipment instance);
    partial void InsertErrorofComputer(ErrorofComputer instance);
    partial void UpdateErrorofComputer(ErrorofComputer instance);
    partial void DeleteErrorofComputer(ErrorofComputer instance);
    partial void InsertError(Error instance);
    partial void UpdateError(Error instance);
    partial void DeleteError(Error instance);
    partial void InsertGroupMap(GroupMap instance);
    partial void UpdateGroupMap(GroupMap instance);
    partial void DeleteGroupMap(GroupMap instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertGroupSession(GroupSession instance);
    partial void UpdateGroupSession(GroupSession instance);
    partial void DeleteGroupSession(GroupSession instance);
    partial void InsertGroupStudent(GroupStudent instance);
    partial void UpdateGroupStudent(GroupStudent instance);
    partial void DeleteGroupStudent(GroupStudent instance);
    partial void InsertHistoryRoom(HistoryRoom instance);
    partial void UpdateHistoryRoom(HistoryRoom instance);
    partial void DeleteHistoryRoom(HistoryRoom instance);
    partial void InsertItemMain(ItemMain instance);
    partial void UpdateItemMain(ItemMain instance);
    partial void DeleteItemMain(ItemMain instance);
    partial void InsertLocation(Location instance);
    partial void UpdateLocation(Location instance);
    partial void DeleteLocation(Location instance);
    partial void InsertLog(Log instance);
    partial void UpdateLog(Log instance);
    partial void DeleteLog(Log instance);
    partial void InsertMenuGroup(MenuGroup instance);
    partial void UpdateMenuGroup(MenuGroup instance);
    partial void DeleteMenuGroup(MenuGroup instance);
    partial void InsertMenus(Menus instance);
    partial void UpdateMenus(Menus instance);
    partial void DeleteMenus(Menus instance);
    partial void InsertNotice(Notice instance);
    partial void UpdateNotice(Notice instance);
    partial void DeleteNotice(Notice instance);
    partial void InsertPermission(Permission instance);
    partial void UpdatePermission(Permission instance);
    partial void DeletePermission(Permission instance);
    partial void InsertPracticeRoom(PracticeRoom instance);
    partial void UpdatePracticeRoom(PracticeRoom instance);
    partial void DeletePracticeRoom(PracticeRoom instance);
    partial void InsertRepairError(RepairError instance);
    partial void UpdateRepairError(RepairError instance);
    partial void DeleteRepairError(RepairError instance);
    partial void InsertReplaceEquipment(ReplaceEquipment instance);
    partial void UpdateReplaceEquipment(ReplaceEquipment instance);
    partial void DeleteReplaceEquipment(ReplaceEquipment instance);
    partial void InsertRoomMap(RoomMap instance);
    partial void UpdateRoomMap(RoomMap instance);
    partial void DeleteRoomMap(RoomMap instance);
    partial void InsertSessionSpace(SessionSpace instance);
    partial void UpdateSessionSpace(SessionSpace instance);
    partial void DeleteSessionSpace(SessionSpace instance);
    partial void InsertStudentPractice(StudentPractice instance);
    partial void UpdateStudentPractice(StudentPractice instance);
    partial void DeleteStudentPractice(StudentPractice instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertSubject(Subject instance);
    partial void UpdateSubject(Subject instance);
    partial void DeleteSubject(Subject instance);
    partial void InsertTeacher(Teacher instance);
    partial void UpdateTeacher(Teacher instance);
    partial void DeleteTeacher(Teacher instance);
    partial void InsertTemporaryImformation(TemporaryImformation instance);
    partial void UpdateTemporaryImformation(TemporaryImformation instance);
    partial void DeleteTemporaryImformation(TemporaryImformation instance);
    #endregion
		
		public PTMSDataContext() : 
				base(global::PracticeTeachingManagementSystem.Properties.Settings.Default.PTMSConnectionString4, mappingSource)
		{
			OnCreated();
		}
		
		public PTMSDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PTMSDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PTMSDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PTMSDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AccountPermission> AccountPermissions
		{
			get
			{
				return this.GetTable<AccountPermission>();
			}
		}
		
		public System.Data.Linq.Table<Train> Trains
		{
			get
			{
				return this.GetTable<Train>();
			}
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<Branch> Branches
		{
			get
			{
				return this.GetTable<Branch>();
			}
		}
		
		public System.Data.Linq.Table<CallRool> CallRools
		{
			get
			{
				return this.GetTable<CallRool>();
			}
		}
		
		public System.Data.Linq.Table<Chair> Chairs
		{
			get
			{
				return this.GetTable<Chair>();
			}
		}
		
		public System.Data.Linq.Table<Class> Classes
		{
			get
			{
				return this.GetTable<Class>();
			}
		}
		
		public System.Data.Linq.Table<ComputerEquipment> ComputerEquipments
		{
			get
			{
				return this.GetTable<ComputerEquipment>();
			}
		}
		
		public System.Data.Linq.Table<Computer> Computers
		{
			get
			{
				return this.GetTable<Computer>();
			}
		}
		
		public System.Data.Linq.Table<ConfigHaflYear> ConfigHaflYears
		{
			get
			{
				return this.GetTable<ConfigHaflYear>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<Equipment> Equipments
		{
			get
			{
				return this.GetTable<Equipment>();
			}
		}
		
		public System.Data.Linq.Table<ErrorofComputer> ErrorofComputers
		{
			get
			{
				return this.GetTable<ErrorofComputer>();
			}
		}
		
		public System.Data.Linq.Table<Error> Errors
		{
			get
			{
				return this.GetTable<Error>();
			}
		}
		
		public System.Data.Linq.Table<GroupMap> GroupMaps
		{
			get
			{
				return this.GetTable<GroupMap>();
			}
		}
		
		public System.Data.Linq.Table<Group> Groups
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<GroupSession> GroupSessions
		{
			get
			{
				return this.GetTable<GroupSession>();
			}
		}
		
		public System.Data.Linq.Table<GroupStudent> GroupStudents
		{
			get
			{
				return this.GetTable<GroupStudent>();
			}
		}
		
		public System.Data.Linq.Table<HistoryRoom> HistoryRooms
		{
			get
			{
				return this.GetTable<HistoryRoom>();
			}
		}
		
		public System.Data.Linq.Table<ItemMain> ItemMains
		{
			get
			{
				return this.GetTable<ItemMain>();
			}
		}
		
		public System.Data.Linq.Table<Location> Locations
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
		
		public System.Data.Linq.Table<Log> Logs
		{
			get
			{
				return this.GetTable<Log>();
			}
		}
		
		public System.Data.Linq.Table<MenuGroup> MenuGroups
		{
			get
			{
				return this.GetTable<MenuGroup>();
			}
		}
		
		public System.Data.Linq.Table<Menus> Menus
		{
			get
			{
				return this.GetTable<Menus>();
			}
		}
		
		public System.Data.Linq.Table<Notice> Notices
		{
			get
			{
				return this.GetTable<Notice>();
			}
		}
		
		public System.Data.Linq.Table<Permission> Permissions
		{
			get
			{
				return this.GetTable<Permission>();
			}
		}
		
		public System.Data.Linq.Table<PracticeRoom> PracticeRooms
		{
			get
			{
				return this.GetTable<PracticeRoom>();
			}
		}
		
		public System.Data.Linq.Table<RepairError> RepairErrors
		{
			get
			{
				return this.GetTable<RepairError>();
			}
		}
		
		public System.Data.Linq.Table<ReplaceEquipment> ReplaceEquipments
		{
			get
			{
				return this.GetTable<ReplaceEquipment>();
			}
		}
		
		public System.Data.Linq.Table<RoomMap> RoomMaps
		{
			get
			{
				return this.GetTable<RoomMap>();
			}
		}
		
		public System.Data.Linq.Table<SessionSpace> SessionSpaces
		{
			get
			{
				return this.GetTable<SessionSpace>();
			}
		}
		
		public System.Data.Linq.Table<StudentPractice> StudentPractices
		{
			get
			{
				return this.GetTable<StudentPractice>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<Subject> Subjects
		{
			get
			{
				return this.GetTable<Subject>();
			}
		}
		
		public System.Data.Linq.Table<Teacher> Teachers
		{
			get
			{
				return this.GetTable<Teacher>();
			}
		}
		
		public System.Data.Linq.Table<TemporaryImformation> TemporaryImformations
		{
			get
			{
				return this.GetTable<TemporaryImformation>();
			}
		}
	}
	
	[Table(Name="dbo.AccountPermissions")]
	public partial class AccountPermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccountPermissionID;
		
		private int _AccountID;
		
		private int _MenuID;
		
		private int _PermissionID;
		
		private EntitySet<Log> _Logs;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Menus> _Menus;
		
		private EntityRef<Permission> _Permission;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountPermissionIDChanging(int value);
    partial void OnAccountPermissionIDChanged();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    partial void OnMenuIDChanging(int value);
    partial void OnMenuIDChanged();
    partial void OnPermissionIDChanging(int value);
    partial void OnPermissionIDChanged();
    #endregion
		
		public AccountPermission()
		{
			this._Logs = new EntitySet<Log>(new Action<Log>(this.attach_Logs), new Action<Log>(this.detach_Logs));
			this._Account = default(EntityRef<Account>);
			this._Menus = default(EntityRef<Menus>);
			this._Permission = default(EntityRef<Permission>);
			OnCreated();
		}
		
		[Column(Storage="_AccountPermissionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AccountPermissionID
		{
			get
			{
				return this._AccountPermissionID;
			}
			set
			{
				if ((this._AccountPermissionID != value))
				{
					this.OnAccountPermissionIDChanging(value);
					this.SendPropertyChanging();
					this._AccountPermissionID = value;
					this.SendPropertyChanged("AccountPermissionID");
					this.OnAccountPermissionIDChanged();
				}
			}
		}
		
		[Column(Storage="_AccountID", DbType="Int NOT NULL")]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[Column(Storage="_MenuID", DbType="Int NOT NULL")]
		public int MenuID
		{
			get
			{
				return this._MenuID;
			}
			set
			{
				if ((this._MenuID != value))
				{
					if (this._Menus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMenuIDChanging(value);
					this.SendPropertyChanging();
					this._MenuID = value;
					this.SendPropertyChanged("MenuID");
					this.OnMenuIDChanged();
				}
			}
		}
		
		[Column(Storage="_PermissionID", DbType="Int NOT NULL")]
		public int PermissionID
		{
			get
			{
				return this._PermissionID;
			}
			set
			{
				if ((this._PermissionID != value))
				{
					if (this._Permission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermissionIDChanging(value);
					this.SendPropertyChanging();
					this._PermissionID = value;
					this.SendPropertyChanged("PermissionID");
					this.OnPermissionIDChanged();
				}
			}
		}
		
		[Association(Name="AccountPermission_Log", Storage="_Logs", OtherKey="AccountPermissionID")]
		public EntitySet<Log> Logs
		{
			get
			{
				return this._Logs;
			}
			set
			{
				this._Logs.Assign(value);
			}
		}
		
		[Association(Name="Account_AccountPermission", Storage="_Account", ThisKey="AccountID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.AccountPermissions.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.AccountPermissions.Add(this);
						this._AccountID = value.AccountID;
					}
					else
					{
						this._AccountID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[Association(Name="Menus_AccountPermission", Storage="_Menus", ThisKey="MenuID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Menus Menus
		{
			get
			{
				return this._Menus.Entity;
			}
			set
			{
				Menus previousValue = this._Menus.Entity;
				if (((previousValue != value) 
							|| (this._Menus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Menus.Entity = null;
						previousValue.AccountPermissions.Remove(this);
					}
					this._Menus.Entity = value;
					if ((value != null))
					{
						value.AccountPermissions.Add(this);
						this._MenuID = value.MenuID;
					}
					else
					{
						this._MenuID = default(int);
					}
					this.SendPropertyChanged("Menus");
				}
			}
		}
		
		[Association(Name="Permission_AccountPermission", Storage="_Permission", ThisKey="PermissionID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Permission Permission
		{
			get
			{
				return this._Permission.Entity;
			}
			set
			{
				Permission previousValue = this._Permission.Entity;
				if (((previousValue != value) 
							|| (this._Permission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permission.Entity = null;
						previousValue.AccountPermissions.Remove(this);
					}
					this._Permission.Entity = value;
					if ((value != null))
					{
						value.AccountPermissions.Add(this);
						this._PermissionID = value.PermissionID;
					}
					else
					{
						this._PermissionID = default(int);
					}
					this.SendPropertyChanged("Permission");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.AccountPermission = this;
		}
		
		private void detach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.AccountPermission = null;
		}
	}
	
	[Table(Name="dbo.Trains")]
	public partial class Train : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TrainID;
		
		private string _TrainCode;
		
		private string _TrainName;
		
		private EntitySet<Class> _Classes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTrainIDChanging(int value);
    partial void OnTrainIDChanged();
    partial void OnTrainCodeChanging(string value);
    partial void OnTrainCodeChanged();
    partial void OnTrainNameChanging(string value);
    partial void OnTrainNameChanged();
    #endregion
		
		public Train()
		{
			this._Classes = new EntitySet<Class>(new Action<Class>(this.attach_Classes), new Action<Class>(this.detach_Classes));
			OnCreated();
		}
		
		[Column(Storage="_TrainID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TrainID
		{
			get
			{
				return this._TrainID;
			}
			set
			{
				if ((this._TrainID != value))
				{
					this.OnTrainIDChanging(value);
					this.SendPropertyChanging();
					this._TrainID = value;
					this.SendPropertyChanged("TrainID");
					this.OnTrainIDChanged();
				}
			}
		}
		
		[Column(Storage="_TrainCode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TrainCode
		{
			get
			{
				return this._TrainCode;
			}
			set
			{
				if ((this._TrainCode != value))
				{
					this.OnTrainCodeChanging(value);
					this.SendPropertyChanging();
					this._TrainCode = value;
					this.SendPropertyChanged("TrainCode");
					this.OnTrainCodeChanged();
				}
			}
		}
		
		[Column(Storage="_TrainName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string TrainName
		{
			get
			{
				return this._TrainName;
			}
			set
			{
				if ((this._TrainName != value))
				{
					this.OnTrainNameChanging(value);
					this.SendPropertyChanging();
					this._TrainName = value;
					this.SendPropertyChanged("TrainName");
					this.OnTrainNameChanged();
				}
			}
		}
		
		[Association(Name="Train_Class", Storage="_Classes", OtherKey="TrainID")]
		public EntitySet<Class> Classes
		{
			get
			{
				return this._Classes;
			}
			set
			{
				this._Classes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Classes(Class entity)
		{
			this.SendPropertyChanging();
			entity.Train = this;
		}
		
		private void detach_Classes(Class entity)
		{
			this.SendPropertyChanging();
			entity.Train = null;
		}
	}
	
	[Table(Name="dbo.Accounts")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccountID;
		
		private string _UserName;
		
		private string _PassWord;
		
		private System.Nullable<int> _TeacherID;
		
		private int _GroupID;
		
		private string _IP;
		
		private EntitySet<AccountPermission> _AccountPermissions;
		
		private EntitySet<ItemMain> _ItemMains;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<Teacher> _Teacher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPassWordChanging(string value);
    partial void OnPassWordChanged();
    partial void OnTeacherIDChanging(System.Nullable<int> value);
    partial void OnTeacherIDChanged();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    partial void OnIPChanging(string value);
    partial void OnIPChanged();
    #endregion
		
		public Account()
		{
			this._AccountPermissions = new EntitySet<AccountPermission>(new Action<AccountPermission>(this.attach_AccountPermissions), new Action<AccountPermission>(this.detach_AccountPermissions));
			this._ItemMains = new EntitySet<ItemMain>(new Action<ItemMain>(this.attach_ItemMains), new Action<ItemMain>(this.detach_ItemMains));
			this._Group = default(EntityRef<Group>);
			this._Teacher = default(EntityRef<Teacher>);
			OnCreated();
		}
		
		[Column(Storage="_AccountID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_PassWord", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PassWord
		{
			get
			{
				return this._PassWord;
			}
			set
			{
				if ((this._PassWord != value))
				{
					this.OnPassWordChanging(value);
					this.SendPropertyChanging();
					this._PassWord = value;
					this.SendPropertyChanged("PassWord");
					this.OnPassWordChanged();
				}
			}
		}
		
		[Column(Storage="_TeacherID", DbType="Int")]
		public System.Nullable<int> TeacherID
		{
			get
			{
				return this._TeacherID;
			}
			set
			{
				if ((this._TeacherID != value))
				{
					if (this._Teacher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeacherIDChanging(value);
					this.SendPropertyChanging();
					this._TeacherID = value;
					this.SendPropertyChanged("TeacherID");
					this.OnTeacherIDChanged();
				}
			}
		}
		
		[Column(Storage="_GroupID", DbType="Int NOT NULL")]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_IP", DbType="VarChar(25)")]
		public string IP
		{
			get
			{
				return this._IP;
			}
			set
			{
				if ((this._IP != value))
				{
					this.OnIPChanging(value);
					this.SendPropertyChanging();
					this._IP = value;
					this.SendPropertyChanged("IP");
					this.OnIPChanged();
				}
			}
		}
		
		[Association(Name="Account_AccountPermission", Storage="_AccountPermissions", OtherKey="AccountID")]
		public EntitySet<AccountPermission> AccountPermissions
		{
			get
			{
				return this._AccountPermissions;
			}
			set
			{
				this._AccountPermissions.Assign(value);
			}
		}
		
		[Association(Name="Account_ItemMain", Storage="_ItemMains", OtherKey="AccountID")]
		public EntitySet<ItemMain> ItemMains
		{
			get
			{
				return this._ItemMains;
			}
			set
			{
				this._ItemMains.Assign(value);
			}
		}
		
		[Association(Name="Group_Account", Storage="_Group", ThisKey="GroupID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._GroupID = value.GroupID;
					}
					else
					{
						this._GroupID = default(int);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[Association(Name="Teacher_Account", Storage="_Teacher", ThisKey="TeacherID", IsForeignKey=true)]
		public Teacher Teacher
		{
			get
			{
				return this._Teacher.Entity;
			}
			set
			{
				Teacher previousValue = this._Teacher.Entity;
				if (((previousValue != value) 
							|| (this._Teacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teacher.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Teacher.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._TeacherID = value.TeacherID;
					}
					else
					{
						this._TeacherID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Teacher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccountPermissions(AccountPermission entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_AccountPermissions(AccountPermission entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_ItemMains(ItemMain entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_ItemMains(ItemMain entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[Table(Name="dbo.Branches")]
	public partial class Branch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BranchID;
		
		private string _BranchCode;
		
		private string _BranchName;
		
		private EntitySet<Class> _Classes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBranchIDChanging(int value);
    partial void OnBranchIDChanged();
    partial void OnBranchCodeChanging(string value);
    partial void OnBranchCodeChanged();
    partial void OnBranchNameChanging(string value);
    partial void OnBranchNameChanged();
    #endregion
		
		public Branch()
		{
			this._Classes = new EntitySet<Class>(new Action<Class>(this.attach_Classes), new Action<Class>(this.detach_Classes));
			OnCreated();
		}
		
		[Column(Storage="_BranchID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BranchID
		{
			get
			{
				return this._BranchID;
			}
			set
			{
				if ((this._BranchID != value))
				{
					this.OnBranchIDChanging(value);
					this.SendPropertyChanging();
					this._BranchID = value;
					this.SendPropertyChanged("BranchID");
					this.OnBranchIDChanged();
				}
			}
		}
		
		[Column(Storage="_BranchCode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BranchCode
		{
			get
			{
				return this._BranchCode;
			}
			set
			{
				if ((this._BranchCode != value))
				{
					this.OnBranchCodeChanging(value);
					this.SendPropertyChanging();
					this._BranchCode = value;
					this.SendPropertyChanged("BranchCode");
					this.OnBranchCodeChanged();
				}
			}
		}
		
		[Column(Storage="_BranchName", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string BranchName
		{
			get
			{
				return this._BranchName;
			}
			set
			{
				if ((this._BranchName != value))
				{
					this.OnBranchNameChanging(value);
					this.SendPropertyChanging();
					this._BranchName = value;
					this.SendPropertyChanged("BranchName");
					this.OnBranchNameChanged();
				}
			}
		}
		
		[Association(Name="Branch_Class", Storage="_Classes", OtherKey="BranchID")]
		public EntitySet<Class> Classes
		{
			get
			{
				return this._Classes;
			}
			set
			{
				this._Classes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Classes(Class entity)
		{
			this.SendPropertyChanging();
			entity.Branch = this;
		}
		
		private void detach_Classes(Class entity)
		{
			this.SendPropertyChanging();
			entity.Branch = null;
		}
	}
	
	[Table(Name="dbo.CallRools")]
	public partial class CallRool : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CallRoolID;
		
		private int _StudentPracticeID;
		
		private System.Nullable<int> _GroupSessionID;
		
		private string _IsAvailable;
		
		private EntityRef<GroupSession> _GroupSession;
		
		private EntityRef<StudentPractice> _StudentPractice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCallRoolIDChanging(int value);
    partial void OnCallRoolIDChanged();
    partial void OnStudentPracticeIDChanging(int value);
    partial void OnStudentPracticeIDChanged();
    partial void OnGroupSessionIDChanging(System.Nullable<int> value);
    partial void OnGroupSessionIDChanged();
    partial void OnIsAvailableChanging(string value);
    partial void OnIsAvailableChanged();
    #endregion
		
		public CallRool()
		{
			this._GroupSession = default(EntityRef<GroupSession>);
			this._StudentPractice = default(EntityRef<StudentPractice>);
			OnCreated();
		}
		
		[Column(Storage="_CallRoolID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CallRoolID
		{
			get
			{
				return this._CallRoolID;
			}
			set
			{
				if ((this._CallRoolID != value))
				{
					this.OnCallRoolIDChanging(value);
					this.SendPropertyChanging();
					this._CallRoolID = value;
					this.SendPropertyChanged("CallRoolID");
					this.OnCallRoolIDChanged();
				}
			}
		}
		
		[Column(Storage="_StudentPracticeID", DbType="Int NOT NULL")]
		public int StudentPracticeID
		{
			get
			{
				return this._StudentPracticeID;
			}
			set
			{
				if ((this._StudentPracticeID != value))
				{
					if (this._StudentPractice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentPracticeIDChanging(value);
					this.SendPropertyChanging();
					this._StudentPracticeID = value;
					this.SendPropertyChanged("StudentPracticeID");
					this.OnStudentPracticeIDChanged();
				}
			}
		}
		
		[Column(Storage="_GroupSessionID", DbType="Int")]
		public System.Nullable<int> GroupSessionID
		{
			get
			{
				return this._GroupSessionID;
			}
			set
			{
				if ((this._GroupSessionID != value))
				{
					if (this._GroupSession.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupSessionIDChanging(value);
					this.SendPropertyChanging();
					this._GroupSessionID = value;
					this.SendPropertyChanged("GroupSessionID");
					this.OnGroupSessionIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsAvailable", DbType="NVarChar(50)")]
		public string IsAvailable
		{
			get
			{
				return this._IsAvailable;
			}
			set
			{
				if ((this._IsAvailable != value))
				{
					this.OnIsAvailableChanging(value);
					this.SendPropertyChanging();
					this._IsAvailable = value;
					this.SendPropertyChanged("IsAvailable");
					this.OnIsAvailableChanged();
				}
			}
		}
		
		[Association(Name="GroupSession_CallRool", Storage="_GroupSession", ThisKey="GroupSessionID", IsForeignKey=true, DeleteRule="CASCADE")]
		public GroupSession GroupSession
		{
			get
			{
				return this._GroupSession.Entity;
			}
			set
			{
				GroupSession previousValue = this._GroupSession.Entity;
				if (((previousValue != value) 
							|| (this._GroupSession.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupSession.Entity = null;
						previousValue.CallRools.Remove(this);
					}
					this._GroupSession.Entity = value;
					if ((value != null))
					{
						value.CallRools.Add(this);
						this._GroupSessionID = value.GroupSessionID;
					}
					else
					{
						this._GroupSessionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("GroupSession");
				}
			}
		}
		
		[Association(Name="StudentPractice_CallRool", Storage="_StudentPractice", ThisKey="StudentPracticeID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public StudentPractice StudentPractice
		{
			get
			{
				return this._StudentPractice.Entity;
			}
			set
			{
				StudentPractice previousValue = this._StudentPractice.Entity;
				if (((previousValue != value) 
							|| (this._StudentPractice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StudentPractice.Entity = null;
						previousValue.CallRools.Remove(this);
					}
					this._StudentPractice.Entity = value;
					if ((value != null))
					{
						value.CallRools.Add(this);
						this._StudentPracticeID = value.StudentPracticeID;
					}
					else
					{
						this._StudentPracticeID = default(int);
					}
					this.SendPropertyChanged("StudentPractice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Chairs")]
	public partial class Chair : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ChairID;
		
		private string _ChairCode;
		
		private string _ChairName;
		
		private int _DepartmentID;
		
		private EntitySet<Subject> _Subjects;
		
		private EntitySet<Teacher> _Teachers;
		
		private EntityRef<Department> _Department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChairIDChanging(int value);
    partial void OnChairIDChanged();
    partial void OnChairCodeChanging(string value);
    partial void OnChairCodeChanged();
    partial void OnChairNameChanging(string value);
    partial void OnChairNameChanged();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    #endregion
		
		public Chair()
		{
			this._Subjects = new EntitySet<Subject>(new Action<Subject>(this.attach_Subjects), new Action<Subject>(this.detach_Subjects));
			this._Teachers = new EntitySet<Teacher>(new Action<Teacher>(this.attach_Teachers), new Action<Teacher>(this.detach_Teachers));
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[Column(Storage="_ChairID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ChairID
		{
			get
			{
				return this._ChairID;
			}
			set
			{
				if ((this._ChairID != value))
				{
					this.OnChairIDChanging(value);
					this.SendPropertyChanging();
					this._ChairID = value;
					this.SendPropertyChanged("ChairID");
					this.OnChairIDChanged();
				}
			}
		}
		
		[Column(Storage="_ChairCode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ChairCode
		{
			get
			{
				return this._ChairCode;
			}
			set
			{
				if ((this._ChairCode != value))
				{
					this.OnChairCodeChanging(value);
					this.SendPropertyChanging();
					this._ChairCode = value;
					this.SendPropertyChanged("ChairCode");
					this.OnChairCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ChairName", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string ChairName
		{
			get
			{
				return this._ChairName;
			}
			set
			{
				if ((this._ChairName != value))
				{
					this.OnChairNameChanging(value);
					this.SendPropertyChanging();
					this._ChairName = value;
					this.SendPropertyChanged("ChairName");
					this.OnChairNameChanged();
				}
			}
		}
		
		[Column(Storage="_DepartmentID", DbType="Int NOT NULL")]
		public int DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[Association(Name="Chair_Subject", Storage="_Subjects", OtherKey="ChairID")]
		public EntitySet<Subject> Subjects
		{
			get
			{
				return this._Subjects;
			}
			set
			{
				this._Subjects.Assign(value);
			}
		}
		
		[Association(Name="Chair_Teacher", Storage="_Teachers", OtherKey="ChairID")]
		public EntitySet<Teacher> Teachers
		{
			get
			{
				return this._Teachers;
			}
			set
			{
				this._Teachers.Assign(value);
			}
		}
		
		[Association(Name="Department_Chair", Storage="_Department", ThisKey="DepartmentID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Chairs.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Chairs.Add(this);
						this._DepartmentID = value.DepartmentID;
					}
					else
					{
						this._DepartmentID = default(int);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Subjects(Subject entity)
		{
			this.SendPropertyChanging();
			entity.Chair = this;
		}
		
		private void detach_Subjects(Subject entity)
		{
			this.SendPropertyChanging();
			entity.Chair = null;
		}
		
		private void attach_Teachers(Teacher entity)
		{
			this.SendPropertyChanging();
			entity.Chair = this;
		}
		
		private void detach_Teachers(Teacher entity)
		{
			this.SendPropertyChanging();
			entity.Chair = null;
		}
	}
	
	[Table(Name="dbo.Classes")]
	public partial class Class : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClassID;
		
		private string _ClassCode;
		
		private string _ClassName;
		
		private int _DepartmentID;
		
		private int _BranchID;
		
		private int _TrainID;
		
		private int _StartYear;
		
		private System.Nullable<int> _StartHaftYear;
		
		private int _EndYear;
		
		private System.Nullable<int> _LocationID;
		
		private EntitySet<GroupStudent> _GroupStudents;
		
		private EntitySet<Student> _Students;
		
		private EntityRef<Branch> _Branch;
		
		private EntityRef<Train> _Train;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<Location> _Location;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClassIDChanging(int value);
    partial void OnClassIDChanged();
    partial void OnClassCodeChanging(string value);
    partial void OnClassCodeChanged();
    partial void OnClassNameChanging(string value);
    partial void OnClassNameChanged();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    partial void OnBranchIDChanging(int value);
    partial void OnBranchIDChanged();
    partial void OnTrainIDChanging(int value);
    partial void OnTrainIDChanged();
    partial void OnStartYearChanging(int value);
    partial void OnStartYearChanged();
    partial void OnStartHaftYearChanging(System.Nullable<int> value);
    partial void OnStartHaftYearChanged();
    partial void OnEndYearChanging(int value);
    partial void OnEndYearChanged();
    partial void OnLocationIDChanging(System.Nullable<int> value);
    partial void OnLocationIDChanged();
    #endregion
		
		public Class()
		{
			this._GroupStudents = new EntitySet<GroupStudent>(new Action<GroupStudent>(this.attach_GroupStudents), new Action<GroupStudent>(this.detach_GroupStudents));
			this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
			this._Branch = default(EntityRef<Branch>);
			this._Train = default(EntityRef<Train>);
			this._Department = default(EntityRef<Department>);
			this._Location = default(EntityRef<Location>);
			OnCreated();
		}
		
		[Column(Storage="_ClassID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClassID
		{
			get
			{
				return this._ClassID;
			}
			set
			{
				if ((this._ClassID != value))
				{
					this.OnClassIDChanging(value);
					this.SendPropertyChanging();
					this._ClassID = value;
					this.SendPropertyChanged("ClassID");
					this.OnClassIDChanged();
				}
			}
		}
		
		[Column(Storage="_ClassCode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string ClassCode
		{
			get
			{
				return this._ClassCode;
			}
			set
			{
				if ((this._ClassCode != value))
				{
					this.OnClassCodeChanging(value);
					this.SendPropertyChanging();
					this._ClassCode = value;
					this.SendPropertyChanged("ClassCode");
					this.OnClassCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ClassName", DbType="NVarChar(50)")]
		public string ClassName
		{
			get
			{
				return this._ClassName;
			}
			set
			{
				if ((this._ClassName != value))
				{
					this.OnClassNameChanging(value);
					this.SendPropertyChanging();
					this._ClassName = value;
					this.SendPropertyChanged("ClassName");
					this.OnClassNameChanged();
				}
			}
		}
		
		[Column(Storage="_DepartmentID", DbType="Int NOT NULL")]
		public int DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[Column(Storage="_BranchID", DbType="Int NOT NULL")]
		public int BranchID
		{
			get
			{
				return this._BranchID;
			}
			set
			{
				if ((this._BranchID != value))
				{
					if (this._Branch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBranchIDChanging(value);
					this.SendPropertyChanging();
					this._BranchID = value;
					this.SendPropertyChanged("BranchID");
					this.OnBranchIDChanged();
				}
			}
		}
		
		[Column(Storage="_TrainID", DbType="Int NOT NULL")]
		public int TrainID
		{
			get
			{
				return this._TrainID;
			}
			set
			{
				if ((this._TrainID != value))
				{
					if (this._Train.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrainIDChanging(value);
					this.SendPropertyChanging();
					this._TrainID = value;
					this.SendPropertyChanged("TrainID");
					this.OnTrainIDChanged();
				}
			}
		}
		
		[Column(Storage="_StartYear", DbType="Int NOT NULL")]
		public int StartYear
		{
			get
			{
				return this._StartYear;
			}
			set
			{
				if ((this._StartYear != value))
				{
					this.OnStartYearChanging(value);
					this.SendPropertyChanging();
					this._StartYear = value;
					this.SendPropertyChanged("StartYear");
					this.OnStartYearChanged();
				}
			}
		}
		
		[Column(Storage="_StartHaftYear", DbType="Int")]
		public System.Nullable<int> StartHaftYear
		{
			get
			{
				return this._StartHaftYear;
			}
			set
			{
				if ((this._StartHaftYear != value))
				{
					this.OnStartHaftYearChanging(value);
					this.SendPropertyChanging();
					this._StartHaftYear = value;
					this.SendPropertyChanged("StartHaftYear");
					this.OnStartHaftYearChanged();
				}
			}
		}
		
		[Column(Storage="_EndYear", DbType="Int NOT NULL")]
		public int EndYear
		{
			get
			{
				return this._EndYear;
			}
			set
			{
				if ((this._EndYear != value))
				{
					this.OnEndYearChanging(value);
					this.SendPropertyChanging();
					this._EndYear = value;
					this.SendPropertyChanged("EndYear");
					this.OnEndYearChanged();
				}
			}
		}
		
		[Column(Storage="_LocationID", DbType="Int")]
		public System.Nullable<int> LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[Association(Name="Class_GroupStudent", Storage="_GroupStudents", OtherKey="ClassID")]
		public EntitySet<GroupStudent> GroupStudents
		{
			get
			{
				return this._GroupStudents;
			}
			set
			{
				this._GroupStudents.Assign(value);
			}
		}
		
		[Association(Name="Class_Student", Storage="_Students", OtherKey="ClassID")]
		public EntitySet<Student> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		[Association(Name="Branch_Class", Storage="_Branch", ThisKey="BranchID", IsForeignKey=true)]
		public Branch Branch
		{
			get
			{
				return this._Branch.Entity;
			}
			set
			{
				Branch previousValue = this._Branch.Entity;
				if (((previousValue != value) 
							|| (this._Branch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Branch.Entity = null;
						previousValue.Classes.Remove(this);
					}
					this._Branch.Entity = value;
					if ((value != null))
					{
						value.Classes.Add(this);
						this._BranchID = value.BranchID;
					}
					else
					{
						this._BranchID = default(int);
					}
					this.SendPropertyChanged("Branch");
				}
			}
		}
		
		[Association(Name="Train_Class", Storage="_Train", ThisKey="TrainID", IsForeignKey=true)]
		public Train Train
		{
			get
			{
				return this._Train.Entity;
			}
			set
			{
				Train previousValue = this._Train.Entity;
				if (((previousValue != value) 
							|| (this._Train.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Train.Entity = null;
						previousValue.Classes.Remove(this);
					}
					this._Train.Entity = value;
					if ((value != null))
					{
						value.Classes.Add(this);
						this._TrainID = value.TrainID;
					}
					else
					{
						this._TrainID = default(int);
					}
					this.SendPropertyChanged("Train");
				}
			}
		}
		
		[Association(Name="Department_Class", Storage="_Department", ThisKey="DepartmentID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Classes.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Classes.Add(this);
						this._DepartmentID = value.DepartmentID;
					}
					else
					{
						this._DepartmentID = default(int);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[Association(Name="Location_Class", Storage="_Location", ThisKey="LocationID", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.Classes.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.Classes.Add(this);
						this._LocationID = value.LocationID;
					}
					else
					{
						this._LocationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupStudents(GroupStudent entity)
		{
			this.SendPropertyChanging();
			entity.Class = this;
		}
		
		private void detach_GroupStudents(GroupStudent entity)
		{
			this.SendPropertyChanging();
			entity.Class = null;
		}
		
		private void attach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Class = this;
		}
		
		private void detach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Class = null;
		}
	}
	
	[Table(Name="dbo.ComputerEquipments")]
	public partial class ComputerEquipment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ComputerEquipmentID;
		
		private int _ComputerID;
		
		private int _EquipmentID;
		
		private string _Total;
		
		private string _IsError;
		
		private System.Nullable<System.DateTime> _Time;
		
		private string _Note;
		
		private EntitySet<ReplaceEquipment> _ReplaceEquipments;
		
		private EntityRef<Computer> _Computer;
		
		private EntityRef<Equipment> _Equipment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnComputerEquipmentIDChanging(int value);
    partial void OnComputerEquipmentIDChanged();
    partial void OnComputerIDChanging(int value);
    partial void OnComputerIDChanged();
    partial void OnEquipmentIDChanging(int value);
    partial void OnEquipmentIDChanged();
    partial void OnTotalChanging(string value);
    partial void OnTotalChanged();
    partial void OnIsErrorChanging(string value);
    partial void OnIsErrorChanged();
    partial void OnTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public ComputerEquipment()
		{
			this._ReplaceEquipments = new EntitySet<ReplaceEquipment>(new Action<ReplaceEquipment>(this.attach_ReplaceEquipments), new Action<ReplaceEquipment>(this.detach_ReplaceEquipments));
			this._Computer = default(EntityRef<Computer>);
			this._Equipment = default(EntityRef<Equipment>);
			OnCreated();
		}
		
		[Column(Storage="_ComputerEquipmentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ComputerEquipmentID
		{
			get
			{
				return this._ComputerEquipmentID;
			}
			set
			{
				if ((this._ComputerEquipmentID != value))
				{
					this.OnComputerEquipmentIDChanging(value);
					this.SendPropertyChanging();
					this._ComputerEquipmentID = value;
					this.SendPropertyChanged("ComputerEquipmentID");
					this.OnComputerEquipmentIDChanged();
				}
			}
		}
		
		[Column(Storage="_ComputerID", DbType="Int NOT NULL")]
		public int ComputerID
		{
			get
			{
				return this._ComputerID;
			}
			set
			{
				if ((this._ComputerID != value))
				{
					if (this._Computer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnComputerIDChanging(value);
					this.SendPropertyChanging();
					this._ComputerID = value;
					this.SendPropertyChanged("ComputerID");
					this.OnComputerIDChanged();
				}
			}
		}
		
		[Column(Storage="_EquipmentID", DbType="Int NOT NULL")]
		public int EquipmentID
		{
			get
			{
				return this._EquipmentID;
			}
			set
			{
				if ((this._EquipmentID != value))
				{
					if (this._Equipment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEquipmentIDChanging(value);
					this.SendPropertyChanging();
					this._EquipmentID = value;
					this.SendPropertyChanged("EquipmentID");
					this.OnEquipmentIDChanged();
				}
			}
		}
		
		[Column(Storage="_Total", DbType="VarChar(5)")]
		public string Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[Column(Storage="_IsError", DbType="NVarChar(20)")]
		public string IsError
		{
			get
			{
				return this._IsError;
			}
			set
			{
				if ((this._IsError != value))
				{
					this.OnIsErrorChanging(value);
					this.SendPropertyChanging();
					this._IsError = value;
					this.SendPropertyChanged("IsError");
					this.OnIsErrorChanged();
				}
			}
		}
		
		[Column(Storage="_Time", DbType="DateTime")]
		public System.Nullable<System.DateTime> Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Note", DbType="NVarChar(100)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[Association(Name="ComputerEquipment_ReplaceEquipment", Storage="_ReplaceEquipments", OtherKey="ComputerEquipmentID")]
		public EntitySet<ReplaceEquipment> ReplaceEquipments
		{
			get
			{
				return this._ReplaceEquipments;
			}
			set
			{
				this._ReplaceEquipments.Assign(value);
			}
		}
		
		[Association(Name="Computer_ComputerEquipment", Storage="_Computer", ThisKey="ComputerID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Computer Computer
		{
			get
			{
				return this._Computer.Entity;
			}
			set
			{
				Computer previousValue = this._Computer.Entity;
				if (((previousValue != value) 
							|| (this._Computer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Computer.Entity = null;
						previousValue.ComputerEquipments.Remove(this);
					}
					this._Computer.Entity = value;
					if ((value != null))
					{
						value.ComputerEquipments.Add(this);
						this._ComputerID = value.ComputerID;
					}
					else
					{
						this._ComputerID = default(int);
					}
					this.SendPropertyChanged("Computer");
				}
			}
		}
		
		[Association(Name="Equipment_ComputerEquipment", Storage="_Equipment", ThisKey="EquipmentID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Equipment Equipment
		{
			get
			{
				return this._Equipment.Entity;
			}
			set
			{
				Equipment previousValue = this._Equipment.Entity;
				if (((previousValue != value) 
							|| (this._Equipment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Equipment.Entity = null;
						previousValue.ComputerEquipments.Remove(this);
					}
					this._Equipment.Entity = value;
					if ((value != null))
					{
						value.ComputerEquipments.Add(this);
						this._EquipmentID = value.EquipmentID;
					}
					else
					{
						this._EquipmentID = default(int);
					}
					this.SendPropertyChanged("Equipment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReplaceEquipments(ReplaceEquipment entity)
		{
			this.SendPropertyChanging();
			entity.ComputerEquipment = this;
		}
		
		private void detach_ReplaceEquipments(ReplaceEquipment entity)
		{
			this.SendPropertyChanging();
			entity.ComputerEquipment = null;
		}
	}
	
	[Table(Name="dbo.Computers")]
	public partial class Computer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ComputerID;
		
		private int _RoomID;
		
		private string _ComputerCode;
		
		private string _ComputerName;
		
		private string _ComputerNumber;
		
		private string _ComputerIP;
		
		private string _Status;
		
		private EntitySet<ComputerEquipment> _ComputerEquipments;
		
		private EntitySet<ErrorofComputer> _ErrorofComputers;
		
		private EntitySet<GroupMap> _GroupMaps;
		
		private EntitySet<RepairError> _RepairErrors;
		
		private EntitySet<SessionSpace> _SessionSpaces;
		
		private EntityRef<PracticeRoom> _PracticeRoom;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnComputerIDChanging(int value);
    partial void OnComputerIDChanged();
    partial void OnRoomIDChanging(int value);
    partial void OnRoomIDChanged();
    partial void OnComputerCodeChanging(string value);
    partial void OnComputerCodeChanged();
    partial void OnComputerNameChanging(string value);
    partial void OnComputerNameChanged();
    partial void OnComputerNumberChanging(string value);
    partial void OnComputerNumberChanged();
    partial void OnComputerIPChanging(string value);
    partial void OnComputerIPChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public Computer()
		{
			this._ComputerEquipments = new EntitySet<ComputerEquipment>(new Action<ComputerEquipment>(this.attach_ComputerEquipments), new Action<ComputerEquipment>(this.detach_ComputerEquipments));
			this._ErrorofComputers = new EntitySet<ErrorofComputer>(new Action<ErrorofComputer>(this.attach_ErrorofComputers), new Action<ErrorofComputer>(this.detach_ErrorofComputers));
			this._GroupMaps = new EntitySet<GroupMap>(new Action<GroupMap>(this.attach_GroupMaps), new Action<GroupMap>(this.detach_GroupMaps));
			this._RepairErrors = new EntitySet<RepairError>(new Action<RepairError>(this.attach_RepairErrors), new Action<RepairError>(this.detach_RepairErrors));
			this._SessionSpaces = new EntitySet<SessionSpace>(new Action<SessionSpace>(this.attach_SessionSpaces), new Action<SessionSpace>(this.detach_SessionSpaces));
			this._PracticeRoom = default(EntityRef<PracticeRoom>);
			OnCreated();
		}
		
		[Column(Storage="_ComputerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ComputerID
		{
			get
			{
				return this._ComputerID;
			}
			set
			{
				if ((this._ComputerID != value))
				{
					this.OnComputerIDChanging(value);
					this.SendPropertyChanging();
					this._ComputerID = value;
					this.SendPropertyChanged("ComputerID");
					this.OnComputerIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoomID", DbType="Int NOT NULL")]
		public int RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					if (this._PracticeRoom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[Column(Storage="_ComputerCode", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string ComputerCode
		{
			get
			{
				return this._ComputerCode;
			}
			set
			{
				if ((this._ComputerCode != value))
				{
					this.OnComputerCodeChanging(value);
					this.SendPropertyChanging();
					this._ComputerCode = value;
					this.SendPropertyChanged("ComputerCode");
					this.OnComputerCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ComputerName", DbType="NVarChar(50)")]
		public string ComputerName
		{
			get
			{
				return this._ComputerName;
			}
			set
			{
				if ((this._ComputerName != value))
				{
					this.OnComputerNameChanging(value);
					this.SendPropertyChanging();
					this._ComputerName = value;
					this.SendPropertyChanged("ComputerName");
					this.OnComputerNameChanged();
				}
			}
		}
		
		[Column(Storage="_ComputerNumber", DbType="NVarChar(50)")]
		public string ComputerNumber
		{
			get
			{
				return this._ComputerNumber;
			}
			set
			{
				if ((this._ComputerNumber != value))
				{
					this.OnComputerNumberChanging(value);
					this.SendPropertyChanging();
					this._ComputerNumber = value;
					this.SendPropertyChanged("ComputerNumber");
					this.OnComputerNumberChanged();
				}
			}
		}
		
		[Column(Storage="_ComputerIP", DbType="VarChar(20)")]
		public string ComputerIP
		{
			get
			{
				return this._ComputerIP;
			}
			set
			{
				if ((this._ComputerIP != value))
				{
					this.OnComputerIPChanging(value);
					this.SendPropertyChanging();
					this._ComputerIP = value;
					this.SendPropertyChanged("ComputerIP");
					this.OnComputerIPChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="VarChar(5)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Association(Name="Computer_ComputerEquipment", Storage="_ComputerEquipments", OtherKey="ComputerID")]
		public EntitySet<ComputerEquipment> ComputerEquipments
		{
			get
			{
				return this._ComputerEquipments;
			}
			set
			{
				this._ComputerEquipments.Assign(value);
			}
		}
		
		[Association(Name="Computer_ErrorofComputer", Storage="_ErrorofComputers", OtherKey="ComputerID")]
		public EntitySet<ErrorofComputer> ErrorofComputers
		{
			get
			{
				return this._ErrorofComputers;
			}
			set
			{
				this._ErrorofComputers.Assign(value);
			}
		}
		
		[Association(Name="Computer_GroupMap", Storage="_GroupMaps", OtherKey="ComputerID")]
		public EntitySet<GroupMap> GroupMaps
		{
			get
			{
				return this._GroupMaps;
			}
			set
			{
				this._GroupMaps.Assign(value);
			}
		}
		
		[Association(Name="Computer_RepairError", Storage="_RepairErrors", OtherKey="ComputerID")]
		public EntitySet<RepairError> RepairErrors
		{
			get
			{
				return this._RepairErrors;
			}
			set
			{
				this._RepairErrors.Assign(value);
			}
		}
		
		[Association(Name="Computer_SessionSpace", Storage="_SessionSpaces", OtherKey="ComputerID")]
		public EntitySet<SessionSpace> SessionSpaces
		{
			get
			{
				return this._SessionSpaces;
			}
			set
			{
				this._SessionSpaces.Assign(value);
			}
		}
		
		[Association(Name="PracticeRoom_Computer", Storage="_PracticeRoom", ThisKey="RoomID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PracticeRoom PracticeRoom
		{
			get
			{
				return this._PracticeRoom.Entity;
			}
			set
			{
				PracticeRoom previousValue = this._PracticeRoom.Entity;
				if (((previousValue != value) 
							|| (this._PracticeRoom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PracticeRoom.Entity = null;
						previousValue.Computers.Remove(this);
					}
					this._PracticeRoom.Entity = value;
					if ((value != null))
					{
						value.Computers.Add(this);
						this._RoomID = value.RoomID;
					}
					else
					{
						this._RoomID = default(int);
					}
					this.SendPropertyChanged("PracticeRoom");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ComputerEquipments(ComputerEquipment entity)
		{
			this.SendPropertyChanging();
			entity.Computer = this;
		}
		
		private void detach_ComputerEquipments(ComputerEquipment entity)
		{
			this.SendPropertyChanging();
			entity.Computer = null;
		}
		
		private void attach_ErrorofComputers(ErrorofComputer entity)
		{
			this.SendPropertyChanging();
			entity.Computer = this;
		}
		
		private void detach_ErrorofComputers(ErrorofComputer entity)
		{
			this.SendPropertyChanging();
			entity.Computer = null;
		}
		
		private void attach_GroupMaps(GroupMap entity)
		{
			this.SendPropertyChanging();
			entity.Computer = this;
		}
		
		private void detach_GroupMaps(GroupMap entity)
		{
			this.SendPropertyChanging();
			entity.Computer = null;
		}
		
		private void attach_RepairErrors(RepairError entity)
		{
			this.SendPropertyChanging();
			entity.Computer = this;
		}
		
		private void detach_RepairErrors(RepairError entity)
		{
			this.SendPropertyChanging();
			entity.Computer = null;
		}
		
		private void attach_SessionSpaces(SessionSpace entity)
		{
			this.SendPropertyChanging();
			entity.Computer = this;
		}
		
		private void detach_SessionSpaces(SessionSpace entity)
		{
			this.SendPropertyChanging();
			entity.Computer = null;
		}
	}
	
	[Table(Name="dbo.ConfigHaflYears")]
	public partial class ConfigHaflYear : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ConfigHaflYearID;
		
		private string _Year;
		
		private System.DateTime _StartDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConfigHaflYearIDChanging(int value);
    partial void OnConfigHaflYearIDChanged();
    partial void OnYearChanging(string value);
    partial void OnYearChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    #endregion
		
		public ConfigHaflYear()
		{
			OnCreated();
		}
		
		[Column(Storage="_ConfigHaflYearID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ConfigHaflYearID
		{
			get
			{
				return this._ConfigHaflYearID;
			}
			set
			{
				if ((this._ConfigHaflYearID != value))
				{
					this.OnConfigHaflYearIDChanging(value);
					this.SendPropertyChanging();
					this._ConfigHaflYearID = value;
					this.SendPropertyChanged("ConfigHaflYearID");
					this.OnConfigHaflYearIDChanged();
				}
			}
		}
		
		[Column(Storage="_Year", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Departments")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DepartmentID;
		
		private string _DepartmentCode;
		
		private string _DepartmentName;
		
		private string _PhoneNumber;
		
		private string _Description;
		
		private EntitySet<Chair> _Chairs;
		
		private EntitySet<Class> _Classes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    partial void OnDepartmentCodeChanging(string value);
    partial void OnDepartmentCodeChanged();
    partial void OnDepartmentNameChanging(string value);
    partial void OnDepartmentNameChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Department()
		{
			this._Chairs = new EntitySet<Chair>(new Action<Chair>(this.attach_Chairs), new Action<Chair>(this.detach_Chairs));
			this._Classes = new EntitySet<Class>(new Action<Class>(this.attach_Classes), new Action<Class>(this.detach_Classes));
			OnCreated();
		}
		
		[Column(Storage="_DepartmentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[Column(Storage="_DepartmentCode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string DepartmentCode
		{
			get
			{
				return this._DepartmentCode;
			}
			set
			{
				if ((this._DepartmentCode != value))
				{
					this.OnDepartmentCodeChanging(value);
					this.SendPropertyChanging();
					this._DepartmentCode = value;
					this.SendPropertyChanged("DepartmentCode");
					this.OnDepartmentCodeChanged();
				}
			}
		}
		
		[Column(Storage="_DepartmentName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string DepartmentName
		{
			get
			{
				return this._DepartmentName;
			}
			set
			{
				if ((this._DepartmentName != value))
				{
					this.OnDepartmentNameChanging(value);
					this.SendPropertyChanging();
					this._DepartmentName = value;
					this.SendPropertyChanged("DepartmentName");
					this.OnDepartmentNameChanged();
				}
			}
		}
		
		[Column(Storage="_PhoneNumber", DbType="VarChar(15)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(200)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Department_Chair", Storage="_Chairs", OtherKey="DepartmentID")]
		public EntitySet<Chair> Chairs
		{
			get
			{
				return this._Chairs;
			}
			set
			{
				this._Chairs.Assign(value);
			}
		}
		
		[Association(Name="Department_Class", Storage="_Classes", OtherKey="DepartmentID")]
		public EntitySet<Class> Classes
		{
			get
			{
				return this._Classes;
			}
			set
			{
				this._Classes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Chairs(Chair entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Chairs(Chair entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
		
		private void attach_Classes(Class entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Classes(Class entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[Table(Name="dbo.Equipments")]
	public partial class Equipment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EquipmentID;
		
		private string _EquipmentCode;
		
		private string _EquipmentName;
		
		private string _Firm;
		
		private string _Configuration;
		
		private EntitySet<ComputerEquipment> _ComputerEquipments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEquipmentIDChanging(int value);
    partial void OnEquipmentIDChanged();
    partial void OnEquipmentCodeChanging(string value);
    partial void OnEquipmentCodeChanged();
    partial void OnEquipmentNameChanging(string value);
    partial void OnEquipmentNameChanged();
    partial void OnFirmChanging(string value);
    partial void OnFirmChanged();
    partial void OnConfigurationChanging(string value);
    partial void OnConfigurationChanged();
    #endregion
		
		public Equipment()
		{
			this._ComputerEquipments = new EntitySet<ComputerEquipment>(new Action<ComputerEquipment>(this.attach_ComputerEquipments), new Action<ComputerEquipment>(this.detach_ComputerEquipments));
			OnCreated();
		}
		
		[Column(Storage="_EquipmentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EquipmentID
		{
			get
			{
				return this._EquipmentID;
			}
			set
			{
				if ((this._EquipmentID != value))
				{
					this.OnEquipmentIDChanging(value);
					this.SendPropertyChanging();
					this._EquipmentID = value;
					this.SendPropertyChanged("EquipmentID");
					this.OnEquipmentIDChanged();
				}
			}
		}
		
		[Column(Storage="_EquipmentCode", DbType="VarChar(20)")]
		public string EquipmentCode
		{
			get
			{
				return this._EquipmentCode;
			}
			set
			{
				if ((this._EquipmentCode != value))
				{
					this.OnEquipmentCodeChanging(value);
					this.SendPropertyChanging();
					this._EquipmentCode = value;
					this.SendPropertyChanged("EquipmentCode");
					this.OnEquipmentCodeChanged();
				}
			}
		}
		
		[Column(Storage="_EquipmentName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string EquipmentName
		{
			get
			{
				return this._EquipmentName;
			}
			set
			{
				if ((this._EquipmentName != value))
				{
					this.OnEquipmentNameChanging(value);
					this.SendPropertyChanging();
					this._EquipmentName = value;
					this.SendPropertyChanged("EquipmentName");
					this.OnEquipmentNameChanged();
				}
			}
		}
		
		[Column(Storage="_Firm", DbType="NVarChar(50)")]
		public string Firm
		{
			get
			{
				return this._Firm;
			}
			set
			{
				if ((this._Firm != value))
				{
					this.OnFirmChanging(value);
					this.SendPropertyChanging();
					this._Firm = value;
					this.SendPropertyChanged("Firm");
					this.OnFirmChanged();
				}
			}
		}
		
		[Column(Storage="_Configuration", DbType="NVarChar(50)")]
		public string Configuration
		{
			get
			{
				return this._Configuration;
			}
			set
			{
				if ((this._Configuration != value))
				{
					this.OnConfigurationChanging(value);
					this.SendPropertyChanging();
					this._Configuration = value;
					this.SendPropertyChanged("Configuration");
					this.OnConfigurationChanged();
				}
			}
		}
		
		[Association(Name="Equipment_ComputerEquipment", Storage="_ComputerEquipments", OtherKey="EquipmentID")]
		public EntitySet<ComputerEquipment> ComputerEquipments
		{
			get
			{
				return this._ComputerEquipments;
			}
			set
			{
				this._ComputerEquipments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ComputerEquipments(ComputerEquipment entity)
		{
			this.SendPropertyChanging();
			entity.Equipment = this;
		}
		
		private void detach_ComputerEquipments(ComputerEquipment entity)
		{
			this.SendPropertyChanging();
			entity.Equipment = null;
		}
	}
	
	[Table(Name="dbo.ErrorofComputers")]
	public partial class ErrorofComputer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ErrorofComputerID;
		
		private System.Nullable<int> _ComputerID;
		
		private System.Nullable<int> _ErrorID;
		
		private System.Nullable<System.DateTime> _Time;
		
		private string _Status;
		
		private EntityRef<Computer> _Computer;
		
		private EntityRef<Error> _Error;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnErrorofComputerIDChanging(int value);
    partial void OnErrorofComputerIDChanged();
    partial void OnComputerIDChanging(System.Nullable<int> value);
    partial void OnComputerIDChanged();
    partial void OnErrorIDChanging(System.Nullable<int> value);
    partial void OnErrorIDChanged();
    partial void OnTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public ErrorofComputer()
		{
			this._Computer = default(EntityRef<Computer>);
			this._Error = default(EntityRef<Error>);
			OnCreated();
		}
		
		[Column(Storage="_ErrorofComputerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ErrorofComputerID
		{
			get
			{
				return this._ErrorofComputerID;
			}
			set
			{
				if ((this._ErrorofComputerID != value))
				{
					this.OnErrorofComputerIDChanging(value);
					this.SendPropertyChanging();
					this._ErrorofComputerID = value;
					this.SendPropertyChanged("ErrorofComputerID");
					this.OnErrorofComputerIDChanged();
				}
			}
		}
		
		[Column(Storage="_ComputerID", DbType="Int")]
		public System.Nullable<int> ComputerID
		{
			get
			{
				return this._ComputerID;
			}
			set
			{
				if ((this._ComputerID != value))
				{
					if (this._Computer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnComputerIDChanging(value);
					this.SendPropertyChanging();
					this._ComputerID = value;
					this.SendPropertyChanged("ComputerID");
					this.OnComputerIDChanged();
				}
			}
		}
		
		[Column(Storage="_ErrorID", DbType="Int")]
		public System.Nullable<int> ErrorID
		{
			get
			{
				return this._ErrorID;
			}
			set
			{
				if ((this._ErrorID != value))
				{
					if (this._Error.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnErrorIDChanging(value);
					this.SendPropertyChanging();
					this._ErrorID = value;
					this.SendPropertyChanged("ErrorID");
					this.OnErrorIDChanged();
				}
			}
		}
		
		[Column(Storage="_Time", DbType="DateTime")]
		public System.Nullable<System.DateTime> Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="NVarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Association(Name="Computer_ErrorofComputer", Storage="_Computer", ThisKey="ComputerID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Computer Computer
		{
			get
			{
				return this._Computer.Entity;
			}
			set
			{
				Computer previousValue = this._Computer.Entity;
				if (((previousValue != value) 
							|| (this._Computer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Computer.Entity = null;
						previousValue.ErrorofComputers.Remove(this);
					}
					this._Computer.Entity = value;
					if ((value != null))
					{
						value.ErrorofComputers.Add(this);
						this._ComputerID = value.ComputerID;
					}
					else
					{
						this._ComputerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Computer");
				}
			}
		}
		
		[Association(Name="Error_ErrorofComputer", Storage="_Error", ThisKey="ErrorID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Error Error
		{
			get
			{
				return this._Error.Entity;
			}
			set
			{
				Error previousValue = this._Error.Entity;
				if (((previousValue != value) 
							|| (this._Error.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Error.Entity = null;
						previousValue.ErrorofComputers.Remove(this);
					}
					this._Error.Entity = value;
					if ((value != null))
					{
						value.ErrorofComputers.Add(this);
						this._ErrorID = value.ErrorID;
					}
					else
					{
						this._ErrorID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Error");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Errors")]
	public partial class Error : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ErrorID;
		
		private string _ErrorName;
		
		private string _Description;
		
		private EntitySet<ErrorofComputer> _ErrorofComputers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnErrorIDChanging(int value);
    partial void OnErrorIDChanged();
    partial void OnErrorNameChanging(string value);
    partial void OnErrorNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Error()
		{
			this._ErrorofComputers = new EntitySet<ErrorofComputer>(new Action<ErrorofComputer>(this.attach_ErrorofComputers), new Action<ErrorofComputer>(this.detach_ErrorofComputers));
			OnCreated();
		}
		
		[Column(Storage="_ErrorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ErrorID
		{
			get
			{
				return this._ErrorID;
			}
			set
			{
				if ((this._ErrorID != value))
				{
					this.OnErrorIDChanging(value);
					this.SendPropertyChanging();
					this._ErrorID = value;
					this.SendPropertyChanged("ErrorID");
					this.OnErrorIDChanged();
				}
			}
		}
		
		[Column(Storage="_ErrorName", DbType="NVarChar(50)")]
		public string ErrorName
		{
			get
			{
				return this._ErrorName;
			}
			set
			{
				if ((this._ErrorName != value))
				{
					this.OnErrorNameChanging(value);
					this.SendPropertyChanging();
					this._ErrorName = value;
					this.SendPropertyChanged("ErrorName");
					this.OnErrorNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Error_ErrorofComputer", Storage="_ErrorofComputers", OtherKey="ErrorID")]
		public EntitySet<ErrorofComputer> ErrorofComputers
		{
			get
			{
				return this._ErrorofComputers;
			}
			set
			{
				this._ErrorofComputers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ErrorofComputers(ErrorofComputer entity)
		{
			this.SendPropertyChanging();
			entity.Error = this;
		}
		
		private void detach_ErrorofComputers(ErrorofComputer entity)
		{
			this.SendPropertyChanging();
			entity.Error = null;
		}
	}
	
	[Table(Name="dbo.GroupMaps")]
	public partial class GroupMap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupMapID;
		
		private int _StudentPracticeID;
		
		private int _ComputerID;
		
		private EntityRef<Computer> _Computer;
		
		private EntityRef<StudentPractice> _StudentPractice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupMapIDChanging(int value);
    partial void OnGroupMapIDChanged();
    partial void OnStudentPracticeIDChanging(int value);
    partial void OnStudentPracticeIDChanged();
    partial void OnComputerIDChanging(int value);
    partial void OnComputerIDChanged();
    #endregion
		
		public GroupMap()
		{
			this._Computer = default(EntityRef<Computer>);
			this._StudentPractice = default(EntityRef<StudentPractice>);
			OnCreated();
		}
		
		[Column(Storage="_GroupMapID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GroupMapID
		{
			get
			{
				return this._GroupMapID;
			}
			set
			{
				if ((this._GroupMapID != value))
				{
					this.OnGroupMapIDChanging(value);
					this.SendPropertyChanging();
					this._GroupMapID = value;
					this.SendPropertyChanged("GroupMapID");
					this.OnGroupMapIDChanged();
				}
			}
		}
		
		[Column(Storage="_StudentPracticeID", DbType="Int NOT NULL")]
		public int StudentPracticeID
		{
			get
			{
				return this._StudentPracticeID;
			}
			set
			{
				if ((this._StudentPracticeID != value))
				{
					if (this._StudentPractice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentPracticeIDChanging(value);
					this.SendPropertyChanging();
					this._StudentPracticeID = value;
					this.SendPropertyChanged("StudentPracticeID");
					this.OnStudentPracticeIDChanged();
				}
			}
		}
		
		[Column(Storage="_ComputerID", DbType="Int NOT NULL")]
		public int ComputerID
		{
			get
			{
				return this._ComputerID;
			}
			set
			{
				if ((this._ComputerID != value))
				{
					if (this._Computer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnComputerIDChanging(value);
					this.SendPropertyChanging();
					this._ComputerID = value;
					this.SendPropertyChanged("ComputerID");
					this.OnComputerIDChanged();
				}
			}
		}
		
		[Association(Name="Computer_GroupMap", Storage="_Computer", ThisKey="ComputerID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Computer Computer
		{
			get
			{
				return this._Computer.Entity;
			}
			set
			{
				Computer previousValue = this._Computer.Entity;
				if (((previousValue != value) 
							|| (this._Computer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Computer.Entity = null;
						previousValue.GroupMaps.Remove(this);
					}
					this._Computer.Entity = value;
					if ((value != null))
					{
						value.GroupMaps.Add(this);
						this._ComputerID = value.ComputerID;
					}
					else
					{
						this._ComputerID = default(int);
					}
					this.SendPropertyChanged("Computer");
				}
			}
		}
		
		[Association(Name="StudentPractice_GroupMap", Storage="_StudentPractice", ThisKey="StudentPracticeID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public StudentPractice StudentPractice
		{
			get
			{
				return this._StudentPractice.Entity;
			}
			set
			{
				StudentPractice previousValue = this._StudentPractice.Entity;
				if (((previousValue != value) 
							|| (this._StudentPractice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StudentPractice.Entity = null;
						previousValue.GroupMaps.Remove(this);
					}
					this._StudentPractice.Entity = value;
					if ((value != null))
					{
						value.GroupMaps.Add(this);
						this._StudentPracticeID = value.StudentPracticeID;
					}
					else
					{
						this._StudentPracticeID = default(int);
					}
					this.SendPropertyChanged("StudentPractice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Groups")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupID;
		
		private string _GroupName;
		
		private string _Description;
		
		private EntitySet<Account> _Accounts;
		
		private EntitySet<MenuGroup> _MenuGroups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Group()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			this._MenuGroups = new EntitySet<MenuGroup>(new Action<MenuGroup>(this.attach_MenuGroups), new Action<MenuGroup>(this.detach_MenuGroups));
			OnCreated();
		}
		
		[Column(Storage="_GroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_GroupName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Group_Account", Storage="_Accounts", OtherKey="GroupID")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		[Association(Name="Group_MenuGroup", Storage="_MenuGroups", OtherKey="GroupID")]
		public EntitySet<MenuGroup> MenuGroups
		{
			get
			{
				return this._MenuGroups;
			}
			set
			{
				this._MenuGroups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_MenuGroups(MenuGroup entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_MenuGroups(MenuGroup entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[Table(Name="dbo.GroupSessions")]
	public partial class GroupSession : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupSessionID;
		
		private int _RoomID;
		
		private int _GroupStudentID;
		
		private int _Week;
		
		private string _DayOfWeek;
		
		private int _StartSession;
		
		private int _TotalSession;
		
		private System.Nullable<System.DateTime> _Date;
		
		private EntitySet<CallRool> _CallRools;
		
		private EntityRef<GroupStudent> _GroupStudent;
		
		private EntityRef<PracticeRoom> _PracticeRoom;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupSessionIDChanging(int value);
    partial void OnGroupSessionIDChanged();
    partial void OnRoomIDChanging(int value);
    partial void OnRoomIDChanged();
    partial void OnGroupStudentIDChanging(int value);
    partial void OnGroupStudentIDChanged();
    partial void OnWeekChanging(int value);
    partial void OnWeekChanged();
    partial void OnDayOfWeekChanging(string value);
    partial void OnDayOfWeekChanged();
    partial void OnStartSessionChanging(int value);
    partial void OnStartSessionChanged();
    partial void OnTotalSessionChanging(int value);
    partial void OnTotalSessionChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    #endregion
		
		public GroupSession()
		{
			this._CallRools = new EntitySet<CallRool>(new Action<CallRool>(this.attach_CallRools), new Action<CallRool>(this.detach_CallRools));
			this._GroupStudent = default(EntityRef<GroupStudent>);
			this._PracticeRoom = default(EntityRef<PracticeRoom>);
			OnCreated();
		}
		
		[Column(Storage="_GroupSessionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GroupSessionID
		{
			get
			{
				return this._GroupSessionID;
			}
			set
			{
				if ((this._GroupSessionID != value))
				{
					this.OnGroupSessionIDChanging(value);
					this.SendPropertyChanging();
					this._GroupSessionID = value;
					this.SendPropertyChanged("GroupSessionID");
					this.OnGroupSessionIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoomID", DbType="Int NOT NULL")]
		public int RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					if (this._PracticeRoom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[Column(Storage="_GroupStudentID", DbType="Int NOT NULL")]
		public int GroupStudentID
		{
			get
			{
				return this._GroupStudentID;
			}
			set
			{
				if ((this._GroupStudentID != value))
				{
					if (this._GroupStudent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupStudentIDChanging(value);
					this.SendPropertyChanging();
					this._GroupStudentID = value;
					this.SendPropertyChanged("GroupStudentID");
					this.OnGroupStudentIDChanged();
				}
			}
		}
		
		[Column(Storage="_Week", DbType="Int NOT NULL")]
		public int Week
		{
			get
			{
				return this._Week;
			}
			set
			{
				if ((this._Week != value))
				{
					this.OnWeekChanging(value);
					this.SendPropertyChanging();
					this._Week = value;
					this.SendPropertyChanged("Week");
					this.OnWeekChanged();
				}
			}
		}
		
		[Column(Storage="_DayOfWeek", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string DayOfWeek
		{
			get
			{
				return this._DayOfWeek;
			}
			set
			{
				if ((this._DayOfWeek != value))
				{
					this.OnDayOfWeekChanging(value);
					this.SendPropertyChanging();
					this._DayOfWeek = value;
					this.SendPropertyChanged("DayOfWeek");
					this.OnDayOfWeekChanged();
				}
			}
		}
		
		[Column(Storage="_StartSession", DbType="Int NOT NULL")]
		public int StartSession
		{
			get
			{
				return this._StartSession;
			}
			set
			{
				if ((this._StartSession != value))
				{
					this.OnStartSessionChanging(value);
					this.SendPropertyChanging();
					this._StartSession = value;
					this.SendPropertyChanged("StartSession");
					this.OnStartSessionChanged();
				}
			}
		}
		
		[Column(Storage="_TotalSession", DbType="Int NOT NULL")]
		public int TotalSession
		{
			get
			{
				return this._TotalSession;
			}
			set
			{
				if ((this._TotalSession != value))
				{
					this.OnTotalSessionChanging(value);
					this.SendPropertyChanging();
					this._TotalSession = value;
					this.SendPropertyChanged("TotalSession");
					this.OnTotalSessionChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Association(Name="GroupSession_CallRool", Storage="_CallRools", OtherKey="GroupSessionID")]
		public EntitySet<CallRool> CallRools
		{
			get
			{
				return this._CallRools;
			}
			set
			{
				this._CallRools.Assign(value);
			}
		}
		
		[Association(Name="GroupStudent_GroupSession", Storage="_GroupStudent", ThisKey="GroupStudentID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public GroupStudent GroupStudent
		{
			get
			{
				return this._GroupStudent.Entity;
			}
			set
			{
				GroupStudent previousValue = this._GroupStudent.Entity;
				if (((previousValue != value) 
							|| (this._GroupStudent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupStudent.Entity = null;
						previousValue.GroupSessions.Remove(this);
					}
					this._GroupStudent.Entity = value;
					if ((value != null))
					{
						value.GroupSessions.Add(this);
						this._GroupStudentID = value.GroupStudentID;
					}
					else
					{
						this._GroupStudentID = default(int);
					}
					this.SendPropertyChanged("GroupStudent");
				}
			}
		}
		
		[Association(Name="PracticeRoom_GroupSession", Storage="_PracticeRoom", ThisKey="RoomID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PracticeRoom PracticeRoom
		{
			get
			{
				return this._PracticeRoom.Entity;
			}
			set
			{
				PracticeRoom previousValue = this._PracticeRoom.Entity;
				if (((previousValue != value) 
							|| (this._PracticeRoom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PracticeRoom.Entity = null;
						previousValue.GroupSessions.Remove(this);
					}
					this._PracticeRoom.Entity = value;
					if ((value != null))
					{
						value.GroupSessions.Add(this);
						this._RoomID = value.RoomID;
					}
					else
					{
						this._RoomID = default(int);
					}
					this.SendPropertyChanged("PracticeRoom");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CallRools(CallRool entity)
		{
			this.SendPropertyChanging();
			entity.GroupSession = this;
		}
		
		private void detach_CallRools(CallRool entity)
		{
			this.SendPropertyChanging();
			entity.GroupSession = null;
		}
	}
	
	[Table(Name="dbo.GroupStudent")]
	public partial class GroupStudent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupStudentID;
		
		private string _GroupName;
		
		private int _ClassID;
		
		private int _TeacherID;
		
		private int _SubjectID;
		
		private string _HaflYear;
		
		private string _Year;
		
		private EntitySet<GroupSession> _GroupSessions;
		
		private EntitySet<StudentPractice> _StudentPractices;
		
		private EntityRef<Class> _Class;
		
		private EntityRef<Subject> _Subject;
		
		private EntityRef<Teacher> _Teacher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupStudentIDChanging(int value);
    partial void OnGroupStudentIDChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnClassIDChanging(int value);
    partial void OnClassIDChanged();
    partial void OnTeacherIDChanging(int value);
    partial void OnTeacherIDChanged();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    partial void OnHaflYearChanging(string value);
    partial void OnHaflYearChanged();
    partial void OnYearChanging(string value);
    partial void OnYearChanged();
    #endregion
		
		public GroupStudent()
		{
			this._GroupSessions = new EntitySet<GroupSession>(new Action<GroupSession>(this.attach_GroupSessions), new Action<GroupSession>(this.detach_GroupSessions));
			this._StudentPractices = new EntitySet<StudentPractice>(new Action<StudentPractice>(this.attach_StudentPractices), new Action<StudentPractice>(this.detach_StudentPractices));
			this._Class = default(EntityRef<Class>);
			this._Subject = default(EntityRef<Subject>);
			this._Teacher = default(EntityRef<Teacher>);
			OnCreated();
		}
		
		[Column(Storage="_GroupStudentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GroupStudentID
		{
			get
			{
				return this._GroupStudentID;
			}
			set
			{
				if ((this._GroupStudentID != value))
				{
					this.OnGroupStudentIDChanging(value);
					this.SendPropertyChanging();
					this._GroupStudentID = value;
					this.SendPropertyChanged("GroupStudentID");
					this.OnGroupStudentIDChanged();
				}
			}
		}
		
		[Column(Storage="_GroupName", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[Column(Storage="_ClassID", DbType="Int NOT NULL")]
		public int ClassID
		{
			get
			{
				return this._ClassID;
			}
			set
			{
				if ((this._ClassID != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassIDChanging(value);
					this.SendPropertyChanging();
					this._ClassID = value;
					this.SendPropertyChanged("ClassID");
					this.OnClassIDChanged();
				}
			}
		}
		
		[Column(Storage="_TeacherID", DbType="Int NOT NULL")]
		public int TeacherID
		{
			get
			{
				return this._TeacherID;
			}
			set
			{
				if ((this._TeacherID != value))
				{
					if (this._Teacher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeacherIDChanging(value);
					this.SendPropertyChanging();
					this._TeacherID = value;
					this.SendPropertyChanged("TeacherID");
					this.OnTeacherIDChanged();
				}
			}
		}
		
		[Column(Storage="_SubjectID", DbType="Int NOT NULL")]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_HaflYear", DbType="VarChar(5)")]
		public string HaflYear
		{
			get
			{
				return this._HaflYear;
			}
			set
			{
				if ((this._HaflYear != value))
				{
					this.OnHaflYearChanging(value);
					this.SendPropertyChanging();
					this._HaflYear = value;
					this.SendPropertyChanged("HaflYear");
					this.OnHaflYearChanged();
				}
			}
		}
		
		[Column(Storage="_Year", DbType="VarChar(50)")]
		public string Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[Association(Name="GroupStudent_GroupSession", Storage="_GroupSessions", OtherKey="GroupStudentID")]
		public EntitySet<GroupSession> GroupSessions
		{
			get
			{
				return this._GroupSessions;
			}
			set
			{
				this._GroupSessions.Assign(value);
			}
		}
		
		[Association(Name="GroupStudent_StudentPractice", Storage="_StudentPractices", OtherKey="GroupStudentID")]
		public EntitySet<StudentPractice> StudentPractices
		{
			get
			{
				return this._StudentPractices;
			}
			set
			{
				this._StudentPractices.Assign(value);
			}
		}
		
		[Association(Name="Class_GroupStudent", Storage="_Class", ThisKey="ClassID", IsForeignKey=true)]
		public Class Class
		{
			get
			{
				return this._Class.Entity;
			}
			set
			{
				Class previousValue = this._Class.Entity;
				if (((previousValue != value) 
							|| (this._Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class.Entity = null;
						previousValue.GroupStudents.Remove(this);
					}
					this._Class.Entity = value;
					if ((value != null))
					{
						value.GroupStudents.Add(this);
						this._ClassID = value.ClassID;
					}
					else
					{
						this._ClassID = default(int);
					}
					this.SendPropertyChanged("Class");
				}
			}
		}
		
		[Association(Name="Subject_GroupStudent", Storage="_Subject", ThisKey="SubjectID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.GroupStudents.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.GroupStudents.Add(this);
						this._SubjectID = value.SubjectID;
					}
					else
					{
						this._SubjectID = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		[Association(Name="Teacher_GroupStudent", Storage="_Teacher", ThisKey="TeacherID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Teacher Teacher
		{
			get
			{
				return this._Teacher.Entity;
			}
			set
			{
				Teacher previousValue = this._Teacher.Entity;
				if (((previousValue != value) 
							|| (this._Teacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teacher.Entity = null;
						previousValue.GroupStudents.Remove(this);
					}
					this._Teacher.Entity = value;
					if ((value != null))
					{
						value.GroupStudents.Add(this);
						this._TeacherID = value.TeacherID;
					}
					else
					{
						this._TeacherID = default(int);
					}
					this.SendPropertyChanged("Teacher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupSessions(GroupSession entity)
		{
			this.SendPropertyChanging();
			entity.GroupStudent = this;
		}
		
		private void detach_GroupSessions(GroupSession entity)
		{
			this.SendPropertyChanging();
			entity.GroupStudent = null;
		}
		
		private void attach_StudentPractices(StudentPractice entity)
		{
			this.SendPropertyChanging();
			entity.GroupStudent = this;
		}
		
		private void detach_StudentPractices(StudentPractice entity)
		{
			this.SendPropertyChanging();
			entity.GroupStudent = null;
		}
	}
	
	[Table(Name="dbo.HistoryRooms")]
	public partial class HistoryRoom : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HistoryTeachID;
		
		private string _Date;
		
		private string _Session;
		
		private int _TeacherID;
		
		private System.Nullable<int> _RoomID;
		
		private System.Nullable<int> _SubjectID;
		
		private System.Nullable<int> _GroupName;
		
		private string _StateRoom;
		
		private string _ChangeSpace;
		
		private string _Note;
		
		private EntityRef<PracticeRoom> _PracticeRoom;
		
		private EntityRef<Subject> _Subject;
		
		private EntityRef<Teacher> _Teacher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHistoryTeachIDChanging(int value);
    partial void OnHistoryTeachIDChanged();
    partial void OnDateChanging(string value);
    partial void OnDateChanged();
    partial void OnSessionChanging(string value);
    partial void OnSessionChanged();
    partial void OnTeacherIDChanging(int value);
    partial void OnTeacherIDChanged();
    partial void OnRoomIDChanging(System.Nullable<int> value);
    partial void OnRoomIDChanged();
    partial void OnSubjectIDChanging(System.Nullable<int> value);
    partial void OnSubjectIDChanged();
    partial void OnGroupNameChanging(System.Nullable<int> value);
    partial void OnGroupNameChanged();
    partial void OnStateRoomChanging(string value);
    partial void OnStateRoomChanged();
    partial void OnChangeSpaceChanging(string value);
    partial void OnChangeSpaceChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public HistoryRoom()
		{
			this._PracticeRoom = default(EntityRef<PracticeRoom>);
			this._Subject = default(EntityRef<Subject>);
			this._Teacher = default(EntityRef<Teacher>);
			OnCreated();
		}
		
		[Column(Storage="_HistoryTeachID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int HistoryTeachID
		{
			get
			{
				return this._HistoryTeachID;
			}
			set
			{
				if ((this._HistoryTeachID != value))
				{
					this.OnHistoryTeachIDChanging(value);
					this.SendPropertyChanging();
					this._HistoryTeachID = value;
					this.SendPropertyChanged("HistoryTeachID");
					this.OnHistoryTeachIDChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_Session", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Session
		{
			get
			{
				return this._Session;
			}
			set
			{
				if ((this._Session != value))
				{
					this.OnSessionChanging(value);
					this.SendPropertyChanging();
					this._Session = value;
					this.SendPropertyChanged("Session");
					this.OnSessionChanged();
				}
			}
		}
		
		[Column(Storage="_TeacherID", DbType="Int NOT NULL")]
		public int TeacherID
		{
			get
			{
				return this._TeacherID;
			}
			set
			{
				if ((this._TeacherID != value))
				{
					if (this._Teacher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeacherIDChanging(value);
					this.SendPropertyChanging();
					this._TeacherID = value;
					this.SendPropertyChanged("TeacherID");
					this.OnTeacherIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoomID", DbType="Int")]
		public System.Nullable<int> RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					if (this._PracticeRoom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[Column(Storage="_SubjectID", DbType="Int")]
		public System.Nullable<int> SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_GroupName", DbType="Int")]
		public System.Nullable<int> GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[Column(Storage="_StateRoom", DbType="NVarChar(100)")]
		public string StateRoom
		{
			get
			{
				return this._StateRoom;
			}
			set
			{
				if ((this._StateRoom != value))
				{
					this.OnStateRoomChanging(value);
					this.SendPropertyChanging();
					this._StateRoom = value;
					this.SendPropertyChanged("StateRoom");
					this.OnStateRoomChanged();
				}
			}
		}
		
		[Column(Storage="_ChangeSpace", DbType="NVarChar(100)")]
		public string ChangeSpace
		{
			get
			{
				return this._ChangeSpace;
			}
			set
			{
				if ((this._ChangeSpace != value))
				{
					this.OnChangeSpaceChanging(value);
					this.SendPropertyChanging();
					this._ChangeSpace = value;
					this.SendPropertyChanged("ChangeSpace");
					this.OnChangeSpaceChanged();
				}
			}
		}
		
		[Column(Storage="_Note", DbType="NVarChar(255)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[Association(Name="PracticeRoom_HistoryRoom", Storage="_PracticeRoom", ThisKey="RoomID", IsForeignKey=true, DeleteRule="CASCADE")]
		public PracticeRoom PracticeRoom
		{
			get
			{
				return this._PracticeRoom.Entity;
			}
			set
			{
				PracticeRoom previousValue = this._PracticeRoom.Entity;
				if (((previousValue != value) 
							|| (this._PracticeRoom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PracticeRoom.Entity = null;
						previousValue.HistoryRooms.Remove(this);
					}
					this._PracticeRoom.Entity = value;
					if ((value != null))
					{
						value.HistoryRooms.Add(this);
						this._RoomID = value.RoomID;
					}
					else
					{
						this._RoomID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PracticeRoom");
				}
			}
		}
		
		[Association(Name="Subject_HistoryRoom", Storage="_Subject", ThisKey="SubjectID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.HistoryRooms.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.HistoryRooms.Add(this);
						this._SubjectID = value.SubjectID;
					}
					else
					{
						this._SubjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		[Association(Name="Teacher_HistoryRoom", Storage="_Teacher", ThisKey="TeacherID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Teacher Teacher
		{
			get
			{
				return this._Teacher.Entity;
			}
			set
			{
				Teacher previousValue = this._Teacher.Entity;
				if (((previousValue != value) 
							|| (this._Teacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teacher.Entity = null;
						previousValue.HistoryRooms.Remove(this);
					}
					this._Teacher.Entity = value;
					if ((value != null))
					{
						value.HistoryRooms.Add(this);
						this._TeacherID = value.TeacherID;
					}
					else
					{
						this._TeacherID = default(int);
					}
					this.SendPropertyChanged("Teacher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ItemMains")]
	public partial class ItemMain : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ItemID;
		
		private string _ItemName;
		
		private int _AccountID;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnItemNameChanging(string value);
    partial void OnItemNameChanged();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    #endregion
		
		public ItemMain()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[Column(Storage="_ItemID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[Column(Storage="_ItemName", DbType="NVarChar(50)")]
		public string ItemName
		{
			get
			{
				return this._ItemName;
			}
			set
			{
				if ((this._ItemName != value))
				{
					this.OnItemNameChanging(value);
					this.SendPropertyChanging();
					this._ItemName = value;
					this.SendPropertyChanged("ItemName");
					this.OnItemNameChanged();
				}
			}
		}
		
		[Column(Storage="_AccountID", DbType="Int NOT NULL")]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[Association(Name="Account_ItemMain", Storage="_Account", ThisKey="AccountID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.ItemMains.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.ItemMains.Add(this);
						this._AccountID = value.AccountID;
					}
					else
					{
						this._AccountID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Locations")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LocationID;
		
		private string _LocationCode;
		
		private string _LocationName;
		
		private string _LocationPlace;
		
		private EntitySet<Class> _Classes;
		
		private EntitySet<PracticeRoom> _PracticeRooms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationIDChanging(int value);
    partial void OnLocationIDChanged();
    partial void OnLocationCodeChanging(string value);
    partial void OnLocationCodeChanged();
    partial void OnLocationNameChanging(string value);
    partial void OnLocationNameChanged();
    partial void OnLocationPlaceChanging(string value);
    partial void OnLocationPlaceChanged();
    #endregion
		
		public Location()
		{
			this._Classes = new EntitySet<Class>(new Action<Class>(this.attach_Classes), new Action<Class>(this.detach_Classes));
			this._PracticeRooms = new EntitySet<PracticeRoom>(new Action<PracticeRoom>(this.attach_PracticeRooms), new Action<PracticeRoom>(this.detach_PracticeRooms));
			OnCreated();
		}
		
		[Column(Storage="_LocationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[Column(Storage="_LocationCode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string LocationCode
		{
			get
			{
				return this._LocationCode;
			}
			set
			{
				if ((this._LocationCode != value))
				{
					this.OnLocationCodeChanging(value);
					this.SendPropertyChanging();
					this._LocationCode = value;
					this.SendPropertyChanged("LocationCode");
					this.OnLocationCodeChanged();
				}
			}
		}
		
		[Column(Storage="_LocationName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LocationName
		{
			get
			{
				return this._LocationName;
			}
			set
			{
				if ((this._LocationName != value))
				{
					this.OnLocationNameChanging(value);
					this.SendPropertyChanging();
					this._LocationName = value;
					this.SendPropertyChanged("LocationName");
					this.OnLocationNameChanged();
				}
			}
		}
		
		[Column(Storage="_LocationPlace", DbType="NVarChar(255)")]
		public string LocationPlace
		{
			get
			{
				return this._LocationPlace;
			}
			set
			{
				if ((this._LocationPlace != value))
				{
					this.OnLocationPlaceChanging(value);
					this.SendPropertyChanging();
					this._LocationPlace = value;
					this.SendPropertyChanged("LocationPlace");
					this.OnLocationPlaceChanged();
				}
			}
		}
		
		[Association(Name="Location_Class", Storage="_Classes", OtherKey="LocationID")]
		public EntitySet<Class> Classes
		{
			get
			{
				return this._Classes;
			}
			set
			{
				this._Classes.Assign(value);
			}
		}
		
		[Association(Name="Location_PracticeRoom", Storage="_PracticeRooms", OtherKey="LocationID")]
		public EntitySet<PracticeRoom> PracticeRooms
		{
			get
			{
				return this._PracticeRooms;
			}
			set
			{
				this._PracticeRooms.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Classes(Class entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_Classes(Class entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
		
		private void attach_PracticeRooms(PracticeRoom entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_PracticeRooms(PracticeRoom entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
	}
	
	[Table(Name="dbo.Logs")]
	public partial class Log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LogID;
		
		private int _AccountPermissionID;
		
		private System.DateTime _LogDate;
		
		private string _Description;
		
		private EntityRef<AccountPermission> _AccountPermission;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogIDChanging(int value);
    partial void OnLogIDChanged();
    partial void OnAccountPermissionIDChanging(int value);
    partial void OnAccountPermissionIDChanged();
    partial void OnLogDateChanging(System.DateTime value);
    partial void OnLogDateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Log()
		{
			this._AccountPermission = default(EntityRef<AccountPermission>);
			OnCreated();
		}
		
		[Column(Storage="_LogID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LogID
		{
			get
			{
				return this._LogID;
			}
			set
			{
				if ((this._LogID != value))
				{
					this.OnLogIDChanging(value);
					this.SendPropertyChanging();
					this._LogID = value;
					this.SendPropertyChanged("LogID");
					this.OnLogIDChanged();
				}
			}
		}
		
		[Column(Storage="_AccountPermissionID", DbType="Int NOT NULL")]
		public int AccountPermissionID
		{
			get
			{
				return this._AccountPermissionID;
			}
			set
			{
				if ((this._AccountPermissionID != value))
				{
					if (this._AccountPermission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountPermissionIDChanging(value);
					this.SendPropertyChanging();
					this._AccountPermissionID = value;
					this.SendPropertyChanged("AccountPermissionID");
					this.OnAccountPermissionIDChanged();
				}
			}
		}
		
		[Column(Storage="_LogDate", DbType="DateTime NOT NULL")]
		public System.DateTime LogDate
		{
			get
			{
				return this._LogDate;
			}
			set
			{
				if ((this._LogDate != value))
				{
					this.OnLogDateChanging(value);
					this.SendPropertyChanging();
					this._LogDate = value;
					this.SendPropertyChanged("LogDate");
					this.OnLogDateChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="AccountPermission_Log", Storage="_AccountPermission", ThisKey="AccountPermissionID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AccountPermission AccountPermission
		{
			get
			{
				return this._AccountPermission.Entity;
			}
			set
			{
				AccountPermission previousValue = this._AccountPermission.Entity;
				if (((previousValue != value) 
							|| (this._AccountPermission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountPermission.Entity = null;
						previousValue.Logs.Remove(this);
					}
					this._AccountPermission.Entity = value;
					if ((value != null))
					{
						value.Logs.Add(this);
						this._AccountPermissionID = value.AccountPermissionID;
					}
					else
					{
						this._AccountPermissionID = default(int);
					}
					this.SendPropertyChanged("AccountPermission");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MenuGroups")]
	public partial class MenuGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MenuGroupID;
		
		private int _GroupID;
		
		private int _MenuID;
		
		private int _PermissionID;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<Menus> _Menus;
		
		private EntityRef<Permission> _Permission;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMenuGroupIDChanging(int value);
    partial void OnMenuGroupIDChanged();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    partial void OnMenuIDChanging(int value);
    partial void OnMenuIDChanged();
    partial void OnPermissionIDChanging(int value);
    partial void OnPermissionIDChanged();
    #endregion
		
		public MenuGroup()
		{
			this._Group = default(EntityRef<Group>);
			this._Menus = default(EntityRef<Menus>);
			this._Permission = default(EntityRef<Permission>);
			OnCreated();
		}
		
		[Column(Storage="_MenuGroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MenuGroupID
		{
			get
			{
				return this._MenuGroupID;
			}
			set
			{
				if ((this._MenuGroupID != value))
				{
					this.OnMenuGroupIDChanging(value);
					this.SendPropertyChanging();
					this._MenuGroupID = value;
					this.SendPropertyChanged("MenuGroupID");
					this.OnMenuGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_GroupID", DbType="Int NOT NULL")]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_MenuID", DbType="Int NOT NULL")]
		public int MenuID
		{
			get
			{
				return this._MenuID;
			}
			set
			{
				if ((this._MenuID != value))
				{
					if (this._Menus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMenuIDChanging(value);
					this.SendPropertyChanging();
					this._MenuID = value;
					this.SendPropertyChanged("MenuID");
					this.OnMenuIDChanged();
				}
			}
		}
		
		[Column(Storage="_PermissionID", DbType="Int NOT NULL")]
		public int PermissionID
		{
			get
			{
				return this._PermissionID;
			}
			set
			{
				if ((this._PermissionID != value))
				{
					if (this._Permission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermissionIDChanging(value);
					this.SendPropertyChanging();
					this._PermissionID = value;
					this.SendPropertyChanged("PermissionID");
					this.OnPermissionIDChanged();
				}
			}
		}
		
		[Association(Name="Group_MenuGroup", Storage="_Group", ThisKey="GroupID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.MenuGroups.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.MenuGroups.Add(this);
						this._GroupID = value.GroupID;
					}
					else
					{
						this._GroupID = default(int);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[Association(Name="Menus_MenuGroup", Storage="_Menus", ThisKey="MenuID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Menus Menus
		{
			get
			{
				return this._Menus.Entity;
			}
			set
			{
				Menus previousValue = this._Menus.Entity;
				if (((previousValue != value) 
							|| (this._Menus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Menus.Entity = null;
						previousValue.MenuGroups.Remove(this);
					}
					this._Menus.Entity = value;
					if ((value != null))
					{
						value.MenuGroups.Add(this);
						this._MenuID = value.MenuID;
					}
					else
					{
						this._MenuID = default(int);
					}
					this.SendPropertyChanged("Menus");
				}
			}
		}
		
		[Association(Name="Permission_MenuGroup", Storage="_Permission", ThisKey="PermissionID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Permission Permission
		{
			get
			{
				return this._Permission.Entity;
			}
			set
			{
				Permission previousValue = this._Permission.Entity;
				if (((previousValue != value) 
							|| (this._Permission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permission.Entity = null;
						previousValue.MenuGroups.Remove(this);
					}
					this._Permission.Entity = value;
					if ((value != null))
					{
						value.MenuGroups.Add(this);
						this._PermissionID = value.PermissionID;
					}
					else
					{
						this._PermissionID = default(int);
					}
					this.SendPropertyChanged("Permission");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Menus")]
	public partial class Menus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MenuID;
		
		private string _FormName;
		
		private EntitySet<AccountPermission> _AccountPermissions;
		
		private EntitySet<MenuGroup> _MenuGroups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMenuIDChanging(int value);
    partial void OnMenuIDChanged();
    partial void OnFormNameChanging(string value);
    partial void OnFormNameChanged();
    #endregion
		
		public Menus()
		{
			this._AccountPermissions = new EntitySet<AccountPermission>(new Action<AccountPermission>(this.attach_AccountPermissions), new Action<AccountPermission>(this.detach_AccountPermissions));
			this._MenuGroups = new EntitySet<MenuGroup>(new Action<MenuGroup>(this.attach_MenuGroups), new Action<MenuGroup>(this.detach_MenuGroups));
			OnCreated();
		}
		
		[Column(Storage="_MenuID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MenuID
		{
			get
			{
				return this._MenuID;
			}
			set
			{
				if ((this._MenuID != value))
				{
					this.OnMenuIDChanging(value);
					this.SendPropertyChanging();
					this._MenuID = value;
					this.SendPropertyChanged("MenuID");
					this.OnMenuIDChanged();
				}
			}
		}
		
		[Column(Storage="_FormName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FormName
		{
			get
			{
				return this._FormName;
			}
			set
			{
				if ((this._FormName != value))
				{
					this.OnFormNameChanging(value);
					this.SendPropertyChanging();
					this._FormName = value;
					this.SendPropertyChanged("FormName");
					this.OnFormNameChanged();
				}
			}
		}
		
		[Association(Name="Menus_AccountPermission", Storage="_AccountPermissions", OtherKey="MenuID")]
		public EntitySet<AccountPermission> AccountPermissions
		{
			get
			{
				return this._AccountPermissions;
			}
			set
			{
				this._AccountPermissions.Assign(value);
			}
		}
		
		[Association(Name="Menus_MenuGroup", Storage="_MenuGroups", OtherKey="MenuID")]
		public EntitySet<MenuGroup> MenuGroups
		{
			get
			{
				return this._MenuGroups;
			}
			set
			{
				this._MenuGroups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccountPermissions(AccountPermission entity)
		{
			this.SendPropertyChanging();
			entity.Menus = this;
		}
		
		private void detach_AccountPermissions(AccountPermission entity)
		{
			this.SendPropertyChanging();
			entity.Menus = null;
		}
		
		private void attach_MenuGroups(MenuGroup entity)
		{
			this.SendPropertyChanging();
			entity.Menus = this;
		}
		
		private void detach_MenuGroups(MenuGroup entity)
		{
			this.SendPropertyChanging();
			entity.Menus = null;
		}
	}
	
	[Table(Name="dbo.Notices")]
	public partial class Notice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NoticeID;
		
		private string _ComputerCode;
		
		private System.Nullable<System.DateTime> _Time;
		
		private string _Message;
		
		private string _OldConfiguration;
		
		private string _NewConfiguration;
		
		private string _LastUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNoticeIDChanging(int value);
    partial void OnNoticeIDChanged();
    partial void OnComputerCodeChanging(string value);
    partial void OnComputerCodeChanged();
    partial void OnTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnOldConfigurationChanging(string value);
    partial void OnOldConfigurationChanged();
    partial void OnNewConfigurationChanging(string value);
    partial void OnNewConfigurationChanged();
    partial void OnLastUserChanging(string value);
    partial void OnLastUserChanged();
    #endregion
		
		public Notice()
		{
			OnCreated();
		}
		
		[Column(Storage="_NoticeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NoticeID
		{
			get
			{
				return this._NoticeID;
			}
			set
			{
				if ((this._NoticeID != value))
				{
					this.OnNoticeIDChanging(value);
					this.SendPropertyChanging();
					this._NoticeID = value;
					this.SendPropertyChanged("NoticeID");
					this.OnNoticeIDChanged();
				}
			}
		}
		
		[Column(Storage="_ComputerCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ComputerCode
		{
			get
			{
				return this._ComputerCode;
			}
			set
			{
				if ((this._ComputerCode != value))
				{
					this.OnComputerCodeChanging(value);
					this.SendPropertyChanging();
					this._ComputerCode = value;
					this.SendPropertyChanged("ComputerCode");
					this.OnComputerCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Time", DbType="DateTime")]
		public System.Nullable<System.DateTime> Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Message", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[Column(Storage="_OldConfiguration", DbType="NVarChar(200)")]
		public string OldConfiguration
		{
			get
			{
				return this._OldConfiguration;
			}
			set
			{
				if ((this._OldConfiguration != value))
				{
					this.OnOldConfigurationChanging(value);
					this.SendPropertyChanging();
					this._OldConfiguration = value;
					this.SendPropertyChanged("OldConfiguration");
					this.OnOldConfigurationChanged();
				}
			}
		}
		
		[Column(Storage="_NewConfiguration", DbType="NVarChar(200)")]
		public string NewConfiguration
		{
			get
			{
				return this._NewConfiguration;
			}
			set
			{
				if ((this._NewConfiguration != value))
				{
					this.OnNewConfigurationChanging(value);
					this.SendPropertyChanging();
					this._NewConfiguration = value;
					this.SendPropertyChanged("NewConfiguration");
					this.OnNewConfigurationChanged();
				}
			}
		}
		
		[Column(Storage="_LastUser", DbType="NVarChar(100)")]
		public string LastUser
		{
			get
			{
				return this._LastUser;
			}
			set
			{
				if ((this._LastUser != value))
				{
					this.OnLastUserChanging(value);
					this.SendPropertyChanging();
					this._LastUser = value;
					this.SendPropertyChanged("LastUser");
					this.OnLastUserChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Permissions")]
	public partial class Permission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PermissionID;
		
		private string _PermissionName;
		
		private string _Description;
		
		private EntitySet<AccountPermission> _AccountPermissions;
		
		private EntitySet<MenuGroup> _MenuGroups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPermissionIDChanging(int value);
    partial void OnPermissionIDChanged();
    partial void OnPermissionNameChanging(string value);
    partial void OnPermissionNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Permission()
		{
			this._AccountPermissions = new EntitySet<AccountPermission>(new Action<AccountPermission>(this.attach_AccountPermissions), new Action<AccountPermission>(this.detach_AccountPermissions));
			this._MenuGroups = new EntitySet<MenuGroup>(new Action<MenuGroup>(this.attach_MenuGroups), new Action<MenuGroup>(this.detach_MenuGroups));
			OnCreated();
		}
		
		[Column(Storage="_PermissionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PermissionID
		{
			get
			{
				return this._PermissionID;
			}
			set
			{
				if ((this._PermissionID != value))
				{
					this.OnPermissionIDChanging(value);
					this.SendPropertyChanging();
					this._PermissionID = value;
					this.SendPropertyChanged("PermissionID");
					this.OnPermissionIDChanged();
				}
			}
		}
		
		[Column(Storage="_PermissionName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string PermissionName
		{
			get
			{
				return this._PermissionName;
			}
			set
			{
				if ((this._PermissionName != value))
				{
					this.OnPermissionNameChanging(value);
					this.SendPropertyChanging();
					this._PermissionName = value;
					this.SendPropertyChanged("PermissionName");
					this.OnPermissionNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Permission_AccountPermission", Storage="_AccountPermissions", OtherKey="PermissionID")]
		public EntitySet<AccountPermission> AccountPermissions
		{
			get
			{
				return this._AccountPermissions;
			}
			set
			{
				this._AccountPermissions.Assign(value);
			}
		}
		
		[Association(Name="Permission_MenuGroup", Storage="_MenuGroups", OtherKey="PermissionID")]
		public EntitySet<MenuGroup> MenuGroups
		{
			get
			{
				return this._MenuGroups;
			}
			set
			{
				this._MenuGroups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccountPermissions(AccountPermission entity)
		{
			this.SendPropertyChanging();
			entity.Permission = this;
		}
		
		private void detach_AccountPermissions(AccountPermission entity)
		{
			this.SendPropertyChanging();
			entity.Permission = null;
		}
		
		private void attach_MenuGroups(MenuGroup entity)
		{
			this.SendPropertyChanging();
			entity.Permission = this;
		}
		
		private void detach_MenuGroups(MenuGroup entity)
		{
			this.SendPropertyChanging();
			entity.Permission = null;
		}
	}
	
	[Table(Name="dbo.PracticeRooms")]
	public partial class PracticeRoom : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoomID;
		
		private System.Nullable<int> _LocationID;
		
		private string _RoomCode;
		
		private System.Nullable<int> _Total;
		
		private string _RoomName;
		
		private string _Note;
		
		private EntitySet<Computer> _Computers;
		
		private EntitySet<GroupSession> _GroupSessions;
		
		private EntitySet<HistoryRoom> _HistoryRooms;
		
		private EntityRef<Location> _Location;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomIDChanging(int value);
    partial void OnRoomIDChanged();
    partial void OnLocationIDChanging(System.Nullable<int> value);
    partial void OnLocationIDChanged();
    partial void OnRoomCodeChanging(string value);
    partial void OnRoomCodeChanged();
    partial void OnTotalChanging(System.Nullable<int> value);
    partial void OnTotalChanged();
    partial void OnRoomNameChanging(string value);
    partial void OnRoomNameChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public PracticeRoom()
		{
			this._Computers = new EntitySet<Computer>(new Action<Computer>(this.attach_Computers), new Action<Computer>(this.detach_Computers));
			this._GroupSessions = new EntitySet<GroupSession>(new Action<GroupSession>(this.attach_GroupSessions), new Action<GroupSession>(this.detach_GroupSessions));
			this._HistoryRooms = new EntitySet<HistoryRoom>(new Action<HistoryRoom>(this.attach_HistoryRooms), new Action<HistoryRoom>(this.detach_HistoryRooms));
			this._Location = default(EntityRef<Location>);
			OnCreated();
		}
		
		[Column(Storage="_RoomID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[Column(Storage="_LocationID", DbType="Int")]
		public System.Nullable<int> LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoomCode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string RoomCode
		{
			get
			{
				return this._RoomCode;
			}
			set
			{
				if ((this._RoomCode != value))
				{
					this.OnRoomCodeChanging(value);
					this.SendPropertyChanging();
					this._RoomCode = value;
					this.SendPropertyChanged("RoomCode");
					this.OnRoomCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Total", DbType="Int")]
		public System.Nullable<int> Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[Column(Storage="_RoomName", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string RoomName
		{
			get
			{
				return this._RoomName;
			}
			set
			{
				if ((this._RoomName != value))
				{
					this.OnRoomNameChanging(value);
					this.SendPropertyChanging();
					this._RoomName = value;
					this.SendPropertyChanged("RoomName");
					this.OnRoomNameChanged();
				}
			}
		}
		
		[Column(Storage="_Note", DbType="NVarChar(50)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[Association(Name="PracticeRoom_Computer", Storage="_Computers", OtherKey="RoomID")]
		public EntitySet<Computer> Computers
		{
			get
			{
				return this._Computers;
			}
			set
			{
				this._Computers.Assign(value);
			}
		}
		
		[Association(Name="PracticeRoom_GroupSession", Storage="_GroupSessions", OtherKey="RoomID")]
		public EntitySet<GroupSession> GroupSessions
		{
			get
			{
				return this._GroupSessions;
			}
			set
			{
				this._GroupSessions.Assign(value);
			}
		}
		
		[Association(Name="PracticeRoom_HistoryRoom", Storage="_HistoryRooms", OtherKey="RoomID")]
		public EntitySet<HistoryRoom> HistoryRooms
		{
			get
			{
				return this._HistoryRooms;
			}
			set
			{
				this._HistoryRooms.Assign(value);
			}
		}
		
		[Association(Name="Location_PracticeRoom", Storage="_Location", ThisKey="LocationID", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.PracticeRooms.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.PracticeRooms.Add(this);
						this._LocationID = value.LocationID;
					}
					else
					{
						this._LocationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Computers(Computer entity)
		{
			this.SendPropertyChanging();
			entity.PracticeRoom = this;
		}
		
		private void detach_Computers(Computer entity)
		{
			this.SendPropertyChanging();
			entity.PracticeRoom = null;
		}
		
		private void attach_GroupSessions(GroupSession entity)
		{
			this.SendPropertyChanging();
			entity.PracticeRoom = this;
		}
		
		private void detach_GroupSessions(GroupSession entity)
		{
			this.SendPropertyChanging();
			entity.PracticeRoom = null;
		}
		
		private void attach_HistoryRooms(HistoryRoom entity)
		{
			this.SendPropertyChanging();
			entity.PracticeRoom = this;
		}
		
		private void detach_HistoryRooms(HistoryRoom entity)
		{
			this.SendPropertyChanging();
			entity.PracticeRoom = null;
		}
	}
	
	[Table(Name="dbo.RepairErrors")]
	public partial class RepairError : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RepairErrorID;
		
		private System.DateTime _TimeRepair;
		
		private string _PeopleChange;
		
		private int _ComputerID;
		
		private string _Error;
		
		private System.Nullable<System.DateTime> _TimeError;
		
		private string _Repair;
		
		private string _Detail;
		
		private EntityRef<Computer> _Computer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRepairErrorIDChanging(int value);
    partial void OnRepairErrorIDChanged();
    partial void OnTimeRepairChanging(System.DateTime value);
    partial void OnTimeRepairChanged();
    partial void OnPeopleChangeChanging(string value);
    partial void OnPeopleChangeChanged();
    partial void OnComputerIDChanging(int value);
    partial void OnComputerIDChanged();
    partial void OnErrorChanging(string value);
    partial void OnErrorChanged();
    partial void OnTimeErrorChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeErrorChanged();
    partial void OnRepairChanging(string value);
    partial void OnRepairChanged();
    partial void OnDetailChanging(string value);
    partial void OnDetailChanged();
    #endregion
		
		public RepairError()
		{
			this._Computer = default(EntityRef<Computer>);
			OnCreated();
		}
		
		[Column(Storage="_RepairErrorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RepairErrorID
		{
			get
			{
				return this._RepairErrorID;
			}
			set
			{
				if ((this._RepairErrorID != value))
				{
					this.OnRepairErrorIDChanging(value);
					this.SendPropertyChanging();
					this._RepairErrorID = value;
					this.SendPropertyChanged("RepairErrorID");
					this.OnRepairErrorIDChanged();
				}
			}
		}
		
		[Column(Storage="_TimeRepair", DbType="DateTime NOT NULL")]
		public System.DateTime TimeRepair
		{
			get
			{
				return this._TimeRepair;
			}
			set
			{
				if ((this._TimeRepair != value))
				{
					this.OnTimeRepairChanging(value);
					this.SendPropertyChanging();
					this._TimeRepair = value;
					this.SendPropertyChanged("TimeRepair");
					this.OnTimeRepairChanged();
				}
			}
		}
		
		[Column(Storage="_PeopleChange", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PeopleChange
		{
			get
			{
				return this._PeopleChange;
			}
			set
			{
				if ((this._PeopleChange != value))
				{
					this.OnPeopleChangeChanging(value);
					this.SendPropertyChanging();
					this._PeopleChange = value;
					this.SendPropertyChanged("PeopleChange");
					this.OnPeopleChangeChanged();
				}
			}
		}
		
		[Column(Storage="_ComputerID", DbType="Int NOT NULL")]
		public int ComputerID
		{
			get
			{
				return this._ComputerID;
			}
			set
			{
				if ((this._ComputerID != value))
				{
					if (this._Computer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnComputerIDChanging(value);
					this.SendPropertyChanging();
					this._ComputerID = value;
					this.SendPropertyChanged("ComputerID");
					this.OnComputerIDChanged();
				}
			}
		}
		
		[Column(Storage="_Error", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Error
		{
			get
			{
				return this._Error;
			}
			set
			{
				if ((this._Error != value))
				{
					this.OnErrorChanging(value);
					this.SendPropertyChanging();
					this._Error = value;
					this.SendPropertyChanged("Error");
					this.OnErrorChanged();
				}
			}
		}
		
		[Column(Storage="_TimeError", DbType="DateTime")]
		public System.Nullable<System.DateTime> TimeError
		{
			get
			{
				return this._TimeError;
			}
			set
			{
				if ((this._TimeError != value))
				{
					this.OnTimeErrorChanging(value);
					this.SendPropertyChanging();
					this._TimeError = value;
					this.SendPropertyChanged("TimeError");
					this.OnTimeErrorChanged();
				}
			}
		}
		
		[Column(Storage="_Repair", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Repair
		{
			get
			{
				return this._Repair;
			}
			set
			{
				if ((this._Repair != value))
				{
					this.OnRepairChanging(value);
					this.SendPropertyChanging();
					this._Repair = value;
					this.SendPropertyChanged("Repair");
					this.OnRepairChanged();
				}
			}
		}
		
		[Column(Storage="_Detail", DbType="NVarChar(100)")]
		public string Detail
		{
			get
			{
				return this._Detail;
			}
			set
			{
				if ((this._Detail != value))
				{
					this.OnDetailChanging(value);
					this.SendPropertyChanging();
					this._Detail = value;
					this.SendPropertyChanged("Detail");
					this.OnDetailChanged();
				}
			}
		}
		
		[Association(Name="Computer_RepairError", Storage="_Computer", ThisKey="ComputerID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Computer Computer
		{
			get
			{
				return this._Computer.Entity;
			}
			set
			{
				Computer previousValue = this._Computer.Entity;
				if (((previousValue != value) 
							|| (this._Computer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Computer.Entity = null;
						previousValue.RepairErrors.Remove(this);
					}
					this._Computer.Entity = value;
					if ((value != null))
					{
						value.RepairErrors.Add(this);
						this._ComputerID = value.ComputerID;
					}
					else
					{
						this._ComputerID = default(int);
					}
					this.SendPropertyChanged("Computer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ReplaceEquipments")]
	public partial class ReplaceEquipment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReplacEquipmentID;
		
		private int _ComputerEquipmentID;
		
		private System.Nullable<System.DateTime> _ReplaceDate;
		
		private string _Note;
		
		private EntityRef<ComputerEquipment> _ComputerEquipment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReplacEquipmentIDChanging(int value);
    partial void OnReplacEquipmentIDChanged();
    partial void OnComputerEquipmentIDChanging(int value);
    partial void OnComputerEquipmentIDChanged();
    partial void OnReplaceDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReplaceDateChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public ReplaceEquipment()
		{
			this._ComputerEquipment = default(EntityRef<ComputerEquipment>);
			OnCreated();
		}
		
		[Column(Storage="_ReplacEquipmentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReplacEquipmentID
		{
			get
			{
				return this._ReplacEquipmentID;
			}
			set
			{
				if ((this._ReplacEquipmentID != value))
				{
					this.OnReplacEquipmentIDChanging(value);
					this.SendPropertyChanging();
					this._ReplacEquipmentID = value;
					this.SendPropertyChanged("ReplacEquipmentID");
					this.OnReplacEquipmentIDChanged();
				}
			}
		}
		
		[Column(Storage="_ComputerEquipmentID", DbType="Int NOT NULL")]
		public int ComputerEquipmentID
		{
			get
			{
				return this._ComputerEquipmentID;
			}
			set
			{
				if ((this._ComputerEquipmentID != value))
				{
					if (this._ComputerEquipment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnComputerEquipmentIDChanging(value);
					this.SendPropertyChanging();
					this._ComputerEquipmentID = value;
					this.SendPropertyChanged("ComputerEquipmentID");
					this.OnComputerEquipmentIDChanged();
				}
			}
		}
		
		[Column(Storage="_ReplaceDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ReplaceDate
		{
			get
			{
				return this._ReplaceDate;
			}
			set
			{
				if ((this._ReplaceDate != value))
				{
					this.OnReplaceDateChanging(value);
					this.SendPropertyChanging();
					this._ReplaceDate = value;
					this.SendPropertyChanged("ReplaceDate");
					this.OnReplaceDateChanged();
				}
			}
		}
		
		[Column(Storage="_Note", DbType="NVarChar(100)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[Association(Name="ComputerEquipment_ReplaceEquipment", Storage="_ComputerEquipment", ThisKey="ComputerEquipmentID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ComputerEquipment ComputerEquipment
		{
			get
			{
				return this._ComputerEquipment.Entity;
			}
			set
			{
				ComputerEquipment previousValue = this._ComputerEquipment.Entity;
				if (((previousValue != value) 
							|| (this._ComputerEquipment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ComputerEquipment.Entity = null;
						previousValue.ReplaceEquipments.Remove(this);
					}
					this._ComputerEquipment.Entity = value;
					if ((value != null))
					{
						value.ReplaceEquipments.Add(this);
						this._ComputerEquipmentID = value.ComputerEquipmentID;
					}
					else
					{
						this._ComputerEquipmentID = default(int);
					}
					this.SendPropertyChanged("ComputerEquipment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.RoomMaps")]
	public partial class RoomMap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoomMapID;
		
		private string _RoomName;
		
		private string _ComputerName;
		
		private int _FontSize;
		
		private int _Width;
		
		private int _Height;
		
		private string _Point;
		
		private string _Color;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomMapIDChanging(int value);
    partial void OnRoomMapIDChanged();
    partial void OnRoomNameChanging(string value);
    partial void OnRoomNameChanged();
    partial void OnComputerNameChanging(string value);
    partial void OnComputerNameChanged();
    partial void OnFontSizeChanging(int value);
    partial void OnFontSizeChanged();
    partial void OnWidthChanging(int value);
    partial void OnWidthChanged();
    partial void OnHeightChanging(int value);
    partial void OnHeightChanged();
    partial void OnPointChanging(string value);
    partial void OnPointChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    #endregion
		
		public RoomMap()
		{
			OnCreated();
		}
		
		[Column(Storage="_RoomMapID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoomMapID
		{
			get
			{
				return this._RoomMapID;
			}
			set
			{
				if ((this._RoomMapID != value))
				{
					this.OnRoomMapIDChanging(value);
					this.SendPropertyChanging();
					this._RoomMapID = value;
					this.SendPropertyChanged("RoomMapID");
					this.OnRoomMapIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoomName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string RoomName
		{
			get
			{
				return this._RoomName;
			}
			set
			{
				if ((this._RoomName != value))
				{
					this.OnRoomNameChanging(value);
					this.SendPropertyChanging();
					this._RoomName = value;
					this.SendPropertyChanged("RoomName");
					this.OnRoomNameChanged();
				}
			}
		}
		
		[Column(Storage="_ComputerName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ComputerName
		{
			get
			{
				return this._ComputerName;
			}
			set
			{
				if ((this._ComputerName != value))
				{
					this.OnComputerNameChanging(value);
					this.SendPropertyChanging();
					this._ComputerName = value;
					this.SendPropertyChanged("ComputerName");
					this.OnComputerNameChanged();
				}
			}
		}
		
		[Column(Storage="_FontSize", DbType="Int NOT NULL")]
		public int FontSize
		{
			get
			{
				return this._FontSize;
			}
			set
			{
				if ((this._FontSize != value))
				{
					this.OnFontSizeChanging(value);
					this.SendPropertyChanging();
					this._FontSize = value;
					this.SendPropertyChanged("FontSize");
					this.OnFontSizeChanged();
				}
			}
		}
		
		[Column(Storage="_Width", DbType="Int NOT NULL")]
		public int Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[Column(Storage="_Height", DbType="Int NOT NULL")]
		public int Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[Column(Storage="_Point", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string Point
		{
			get
			{
				return this._Point;
			}
			set
			{
				if ((this._Point != value))
				{
					this.OnPointChanging(value);
					this.SendPropertyChanging();
					this._Point = value;
					this.SendPropertyChanged("Point");
					this.OnPointChanged();
				}
			}
		}
		
		[Column(Storage="_Color", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SessionSpaces")]
	public partial class SessionSpace : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SessionSpaceID;
		
		private int _ComputerID;
		
		private int _StudentPracticeID;
		
		private string _Session;
		
		private System.DateTime _Date;
		
		private EntityRef<Computer> _Computer;
		
		private EntityRef<StudentPractice> _StudentPractice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSessionSpaceIDChanging(int value);
    partial void OnSessionSpaceIDChanged();
    partial void OnComputerIDChanging(int value);
    partial void OnComputerIDChanged();
    partial void OnStudentPracticeIDChanging(int value);
    partial void OnStudentPracticeIDChanged();
    partial void OnSessionChanging(string value);
    partial void OnSessionChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public SessionSpace()
		{
			this._Computer = default(EntityRef<Computer>);
			this._StudentPractice = default(EntityRef<StudentPractice>);
			OnCreated();
		}
		
		[Column(Storage="_SessionSpaceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SessionSpaceID
		{
			get
			{
				return this._SessionSpaceID;
			}
			set
			{
				if ((this._SessionSpaceID != value))
				{
					this.OnSessionSpaceIDChanging(value);
					this.SendPropertyChanging();
					this._SessionSpaceID = value;
					this.SendPropertyChanged("SessionSpaceID");
					this.OnSessionSpaceIDChanged();
				}
			}
		}
		
		[Column(Storage="_ComputerID", DbType="Int NOT NULL")]
		public int ComputerID
		{
			get
			{
				return this._ComputerID;
			}
			set
			{
				if ((this._ComputerID != value))
				{
					if (this._Computer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnComputerIDChanging(value);
					this.SendPropertyChanging();
					this._ComputerID = value;
					this.SendPropertyChanged("ComputerID");
					this.OnComputerIDChanged();
				}
			}
		}
		
		[Column(Storage="_StudentPracticeID", DbType="Int NOT NULL")]
		public int StudentPracticeID
		{
			get
			{
				return this._StudentPracticeID;
			}
			set
			{
				if ((this._StudentPracticeID != value))
				{
					if (this._StudentPractice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentPracticeIDChanging(value);
					this.SendPropertyChanging();
					this._StudentPracticeID = value;
					this.SendPropertyChanged("StudentPracticeID");
					this.OnStudentPracticeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Session", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Session
		{
			get
			{
				return this._Session;
			}
			set
			{
				if ((this._Session != value))
				{
					this.OnSessionChanging(value);
					this.SendPropertyChanging();
					this._Session = value;
					this.SendPropertyChanged("Session");
					this.OnSessionChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Association(Name="Computer_SessionSpace", Storage="_Computer", ThisKey="ComputerID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Computer Computer
		{
			get
			{
				return this._Computer.Entity;
			}
			set
			{
				Computer previousValue = this._Computer.Entity;
				if (((previousValue != value) 
							|| (this._Computer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Computer.Entity = null;
						previousValue.SessionSpaces.Remove(this);
					}
					this._Computer.Entity = value;
					if ((value != null))
					{
						value.SessionSpaces.Add(this);
						this._ComputerID = value.ComputerID;
					}
					else
					{
						this._ComputerID = default(int);
					}
					this.SendPropertyChanged("Computer");
				}
			}
		}
		
		[Association(Name="StudentPractice_SessionSpace", Storage="_StudentPractice", ThisKey="StudentPracticeID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public StudentPractice StudentPractice
		{
			get
			{
				return this._StudentPractice.Entity;
			}
			set
			{
				StudentPractice previousValue = this._StudentPractice.Entity;
				if (((previousValue != value) 
							|| (this._StudentPractice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StudentPractice.Entity = null;
						previousValue.SessionSpaces.Remove(this);
					}
					this._StudentPractice.Entity = value;
					if ((value != null))
					{
						value.SessionSpaces.Add(this);
						this._StudentPracticeID = value.StudentPracticeID;
					}
					else
					{
						this._StudentPracticeID = default(int);
					}
					this.SendPropertyChanged("StudentPractice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.StudentPractices")]
	public partial class StudentPractice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudentPracticeID;
		
		private int _StudentID;
		
		private int _GroupStudentID;
		
		private System.Nullable<bool> _IsTeamLeader;
		
		private EntitySet<CallRool> _CallRools;
		
		private EntitySet<GroupMap> _GroupMaps;
		
		private EntitySet<SessionSpace> _SessionSpaces;
		
		private EntityRef<GroupStudent> _GroupStudent;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentPracticeIDChanging(int value);
    partial void OnStudentPracticeIDChanged();
    partial void OnStudentIDChanging(int value);
    partial void OnStudentIDChanged();
    partial void OnGroupStudentIDChanging(int value);
    partial void OnGroupStudentIDChanged();
    partial void OnIsTeamLeaderChanging(System.Nullable<bool> value);
    partial void OnIsTeamLeaderChanged();
    #endregion
		
		public StudentPractice()
		{
			this._CallRools = new EntitySet<CallRool>(new Action<CallRool>(this.attach_CallRools), new Action<CallRool>(this.detach_CallRools));
			this._GroupMaps = new EntitySet<GroupMap>(new Action<GroupMap>(this.attach_GroupMaps), new Action<GroupMap>(this.detach_GroupMaps));
			this._SessionSpaces = new EntitySet<SessionSpace>(new Action<SessionSpace>(this.attach_SessionSpaces), new Action<SessionSpace>(this.detach_SessionSpaces));
			this._GroupStudent = default(EntityRef<GroupStudent>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[Column(Storage="_StudentPracticeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StudentPracticeID
		{
			get
			{
				return this._StudentPracticeID;
			}
			set
			{
				if ((this._StudentPracticeID != value))
				{
					this.OnStudentPracticeIDChanging(value);
					this.SendPropertyChanging();
					this._StudentPracticeID = value;
					this.SendPropertyChanged("StudentPracticeID");
					this.OnStudentPracticeIDChanged();
				}
			}
		}
		
		[Column(Storage="_StudentID", DbType="Int NOT NULL")]
		public int StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[Column(Storage="_GroupStudentID", DbType="Int NOT NULL")]
		public int GroupStudentID
		{
			get
			{
				return this._GroupStudentID;
			}
			set
			{
				if ((this._GroupStudentID != value))
				{
					if (this._GroupStudent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupStudentIDChanging(value);
					this.SendPropertyChanging();
					this._GroupStudentID = value;
					this.SendPropertyChanged("GroupStudentID");
					this.OnGroupStudentIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsTeamLeader", DbType="Bit")]
		public System.Nullable<bool> IsTeamLeader
		{
			get
			{
				return this._IsTeamLeader;
			}
			set
			{
				if ((this._IsTeamLeader != value))
				{
					this.OnIsTeamLeaderChanging(value);
					this.SendPropertyChanging();
					this._IsTeamLeader = value;
					this.SendPropertyChanged("IsTeamLeader");
					this.OnIsTeamLeaderChanged();
				}
			}
		}
		
		[Association(Name="StudentPractice_CallRool", Storage="_CallRools", OtherKey="StudentPracticeID")]
		public EntitySet<CallRool> CallRools
		{
			get
			{
				return this._CallRools;
			}
			set
			{
				this._CallRools.Assign(value);
			}
		}
		
		[Association(Name="StudentPractice_GroupMap", Storage="_GroupMaps", OtherKey="StudentPracticeID")]
		public EntitySet<GroupMap> GroupMaps
		{
			get
			{
				return this._GroupMaps;
			}
			set
			{
				this._GroupMaps.Assign(value);
			}
		}
		
		[Association(Name="StudentPractice_SessionSpace", Storage="_SessionSpaces", OtherKey="StudentPracticeID")]
		public EntitySet<SessionSpace> SessionSpaces
		{
			get
			{
				return this._SessionSpaces;
			}
			set
			{
				this._SessionSpaces.Assign(value);
			}
		}
		
		[Association(Name="GroupStudent_StudentPractice", Storage="_GroupStudent", ThisKey="GroupStudentID", IsForeignKey=true)]
		public GroupStudent GroupStudent
		{
			get
			{
				return this._GroupStudent.Entity;
			}
			set
			{
				GroupStudent previousValue = this._GroupStudent.Entity;
				if (((previousValue != value) 
							|| (this._GroupStudent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupStudent.Entity = null;
						previousValue.StudentPractices.Remove(this);
					}
					this._GroupStudent.Entity = value;
					if ((value != null))
					{
						value.StudentPractices.Add(this);
						this._GroupStudentID = value.GroupStudentID;
					}
					else
					{
						this._GroupStudentID = default(int);
					}
					this.SendPropertyChanged("GroupStudent");
				}
			}
		}
		
		[Association(Name="Student_StudentPractice", Storage="_Student", ThisKey="StudentID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.StudentPractices.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.StudentPractices.Add(this);
						this._StudentID = value.StudentID;
					}
					else
					{
						this._StudentID = default(int);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CallRools(CallRool entity)
		{
			this.SendPropertyChanging();
			entity.StudentPractice = this;
		}
		
		private void detach_CallRools(CallRool entity)
		{
			this.SendPropertyChanging();
			entity.StudentPractice = null;
		}
		
		private void attach_GroupMaps(GroupMap entity)
		{
			this.SendPropertyChanging();
			entity.StudentPractice = this;
		}
		
		private void detach_GroupMaps(GroupMap entity)
		{
			this.SendPropertyChanging();
			entity.StudentPractice = null;
		}
		
		private void attach_SessionSpaces(SessionSpace entity)
		{
			this.SendPropertyChanging();
			entity.StudentPractice = this;
		}
		
		private void detach_SessionSpaces(SessionSpace entity)
		{
			this.SendPropertyChanging();
			entity.StudentPractice = null;
		}
	}
	
	[Table(Name="dbo.Students")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudentID;
		
		private int _ClassID;
		
		private string _StudentCode;
		
		private string _FullName;
		
		private string _BirthDay;
		
		private string _Pass;
		
		private EntitySet<StudentPractice> _StudentPractices;
		
		private EntityRef<Class> _Class;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentIDChanging(int value);
    partial void OnStudentIDChanged();
    partial void OnClassIDChanging(int value);
    partial void OnClassIDChanged();
    partial void OnStudentCodeChanging(string value);
    partial void OnStudentCodeChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnBirthDayChanging(string value);
    partial void OnBirthDayChanged();
    partial void OnPassChanging(string value);
    partial void OnPassChanged();
    #endregion
		
		public Student()
		{
			this._StudentPractices = new EntitySet<StudentPractice>(new Action<StudentPractice>(this.attach_StudentPractices), new Action<StudentPractice>(this.detach_StudentPractices));
			this._Class = default(EntityRef<Class>);
			OnCreated();
		}
		
		[Column(Storage="_StudentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[Column(Storage="_ClassID", DbType="Int NOT NULL")]
		public int ClassID
		{
			get
			{
				return this._ClassID;
			}
			set
			{
				if ((this._ClassID != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassIDChanging(value);
					this.SendPropertyChanging();
					this._ClassID = value;
					this.SendPropertyChanged("ClassID");
					this.OnClassIDChanged();
				}
			}
		}
		
		[Column(Storage="_StudentCode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string StudentCode
		{
			get
			{
				return this._StudentCode;
			}
			set
			{
				if ((this._StudentCode != value))
				{
					this.OnStudentCodeChanging(value);
					this.SendPropertyChanging();
					this._StudentCode = value;
					this.SendPropertyChanged("StudentCode");
					this.OnStudentCodeChanged();
				}
			}
		}
		
		[Column(Storage="_FullName", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[Column(Storage="_BirthDay", DbType="VarChar(15)")]
		public string BirthDay
		{
			get
			{
				return this._BirthDay;
			}
			set
			{
				if ((this._BirthDay != value))
				{
					this.OnBirthDayChanging(value);
					this.SendPropertyChanging();
					this._BirthDay = value;
					this.SendPropertyChanged("BirthDay");
					this.OnBirthDayChanged();
				}
			}
		}
		
		[Column(Storage="_Pass", DbType="NVarChar(15)")]
		public string Pass
		{
			get
			{
				return this._Pass;
			}
			set
			{
				if ((this._Pass != value))
				{
					this.OnPassChanging(value);
					this.SendPropertyChanging();
					this._Pass = value;
					this.SendPropertyChanged("Pass");
					this.OnPassChanged();
				}
			}
		}
		
		[Association(Name="Student_StudentPractice", Storage="_StudentPractices", OtherKey="StudentID")]
		public EntitySet<StudentPractice> StudentPractices
		{
			get
			{
				return this._StudentPractices;
			}
			set
			{
				this._StudentPractices.Assign(value);
			}
		}
		
		[Association(Name="Class_Student", Storage="_Class", ThisKey="ClassID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Class Class
		{
			get
			{
				return this._Class.Entity;
			}
			set
			{
				Class previousValue = this._Class.Entity;
				if (((previousValue != value) 
							|| (this._Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._Class.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._ClassID = value.ClassID;
					}
					else
					{
						this._ClassID = default(int);
					}
					this.SendPropertyChanged("Class");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StudentPractices(StudentPractice entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_StudentPractices(StudentPractice entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
	
	[Table(Name="dbo.Subjects")]
	public partial class Subject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubjectID;
		
		private int _ChairID;
		
		private string _SubjectCode;
		
		private string _SubjectName;
		
		private int _Total;
		
		private EntitySet<GroupStudent> _GroupStudents;
		
		private EntitySet<HistoryRoom> _HistoryRooms;
		
		private EntityRef<Chair> _Chair;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    partial void OnChairIDChanging(int value);
    partial void OnChairIDChanged();
    partial void OnSubjectCodeChanging(string value);
    partial void OnSubjectCodeChanged();
    partial void OnSubjectNameChanging(string value);
    partial void OnSubjectNameChanged();
    partial void OnTotalChanging(int value);
    partial void OnTotalChanged();
    #endregion
		
		public Subject()
		{
			this._GroupStudents = new EntitySet<GroupStudent>(new Action<GroupStudent>(this.attach_GroupStudents), new Action<GroupStudent>(this.detach_GroupStudents));
			this._HistoryRooms = new EntitySet<HistoryRoom>(new Action<HistoryRoom>(this.attach_HistoryRooms), new Action<HistoryRoom>(this.detach_HistoryRooms));
			this._Chair = default(EntityRef<Chair>);
			OnCreated();
		}
		
		[Column(Storage="_SubjectID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_ChairID", DbType="Int NOT NULL")]
		public int ChairID
		{
			get
			{
				return this._ChairID;
			}
			set
			{
				if ((this._ChairID != value))
				{
					if (this._Chair.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChairIDChanging(value);
					this.SendPropertyChanging();
					this._ChairID = value;
					this.SendPropertyChanged("ChairID");
					this.OnChairIDChanged();
				}
			}
		}
		
		[Column(Storage="_SubjectCode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string SubjectCode
		{
			get
			{
				return this._SubjectCode;
			}
			set
			{
				if ((this._SubjectCode != value))
				{
					this.OnSubjectCodeChanging(value);
					this.SendPropertyChanging();
					this._SubjectCode = value;
					this.SendPropertyChanged("SubjectCode");
					this.OnSubjectCodeChanged();
				}
			}
		}
		
		[Column(Storage="_SubjectName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SubjectName
		{
			get
			{
				return this._SubjectName;
			}
			set
			{
				if ((this._SubjectName != value))
				{
					this.OnSubjectNameChanging(value);
					this.SendPropertyChanging();
					this._SubjectName = value;
					this.SendPropertyChanged("SubjectName");
					this.OnSubjectNameChanged();
				}
			}
		}
		
		[Column(Storage="_Total", DbType="Int NOT NULL")]
		public int Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[Association(Name="Subject_GroupStudent", Storage="_GroupStudents", OtherKey="SubjectID")]
		public EntitySet<GroupStudent> GroupStudents
		{
			get
			{
				return this._GroupStudents;
			}
			set
			{
				this._GroupStudents.Assign(value);
			}
		}
		
		[Association(Name="Subject_HistoryRoom", Storage="_HistoryRooms", OtherKey="SubjectID")]
		public EntitySet<HistoryRoom> HistoryRooms
		{
			get
			{
				return this._HistoryRooms;
			}
			set
			{
				this._HistoryRooms.Assign(value);
			}
		}
		
		[Association(Name="Chair_Subject", Storage="_Chair", ThisKey="ChairID", IsForeignKey=true)]
		public Chair Chair
		{
			get
			{
				return this._Chair.Entity;
			}
			set
			{
				Chair previousValue = this._Chair.Entity;
				if (((previousValue != value) 
							|| (this._Chair.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Chair.Entity = null;
						previousValue.Subjects.Remove(this);
					}
					this._Chair.Entity = value;
					if ((value != null))
					{
						value.Subjects.Add(this);
						this._ChairID = value.ChairID;
					}
					else
					{
						this._ChairID = default(int);
					}
					this.SendPropertyChanged("Chair");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupStudents(GroupStudent entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_GroupStudents(GroupStudent entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_HistoryRooms(HistoryRoom entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_HistoryRooms(HistoryRoom entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
	}
	
	[Table(Name="dbo.Teachers")]
	public partial class Teacher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeacherID;
		
		private System.Nullable<int> _ChairID;
		
		private string _TeacherCode;
		
		private string _TeacherName;
		
		private string _BirthDay;
		
		private EntitySet<Account> _Accounts;
		
		private EntitySet<GroupStudent> _GroupStudents;
		
		private EntitySet<HistoryRoom> _HistoryRooms;
		
		private EntityRef<Chair> _Chair;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeacherIDChanging(int value);
    partial void OnTeacherIDChanged();
    partial void OnChairIDChanging(System.Nullable<int> value);
    partial void OnChairIDChanged();
    partial void OnTeacherCodeChanging(string value);
    partial void OnTeacherCodeChanged();
    partial void OnTeacherNameChanging(string value);
    partial void OnTeacherNameChanged();
    partial void OnBirthDayChanging(string value);
    partial void OnBirthDayChanged();
    #endregion
		
		public Teacher()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			this._GroupStudents = new EntitySet<GroupStudent>(new Action<GroupStudent>(this.attach_GroupStudents), new Action<GroupStudent>(this.detach_GroupStudents));
			this._HistoryRooms = new EntitySet<HistoryRoom>(new Action<HistoryRoom>(this.attach_HistoryRooms), new Action<HistoryRoom>(this.detach_HistoryRooms));
			this._Chair = default(EntityRef<Chair>);
			OnCreated();
		}
		
		[Column(Storage="_TeacherID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TeacherID
		{
			get
			{
				return this._TeacherID;
			}
			set
			{
				if ((this._TeacherID != value))
				{
					this.OnTeacherIDChanging(value);
					this.SendPropertyChanging();
					this._TeacherID = value;
					this.SendPropertyChanged("TeacherID");
					this.OnTeacherIDChanged();
				}
			}
		}
		
		[Column(Storage="_ChairID", DbType="Int")]
		public System.Nullable<int> ChairID
		{
			get
			{
				return this._ChairID;
			}
			set
			{
				if ((this._ChairID != value))
				{
					if (this._Chair.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChairIDChanging(value);
					this.SendPropertyChanging();
					this._ChairID = value;
					this.SendPropertyChanged("ChairID");
					this.OnChairIDChanged();
				}
			}
		}
		
		[Column(Storage="_TeacherCode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TeacherCode
		{
			get
			{
				return this._TeacherCode;
			}
			set
			{
				if ((this._TeacherCode != value))
				{
					this.OnTeacherCodeChanging(value);
					this.SendPropertyChanging();
					this._TeacherCode = value;
					this.SendPropertyChanged("TeacherCode");
					this.OnTeacherCodeChanged();
				}
			}
		}
		
		[Column(Storage="_TeacherName", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string TeacherName
		{
			get
			{
				return this._TeacherName;
			}
			set
			{
				if ((this._TeacherName != value))
				{
					this.OnTeacherNameChanging(value);
					this.SendPropertyChanging();
					this._TeacherName = value;
					this.SendPropertyChanged("TeacherName");
					this.OnTeacherNameChanged();
				}
			}
		}
		
		[Column(Storage="_BirthDay", DbType="VarChar(15)")]
		public string BirthDay
		{
			get
			{
				return this._BirthDay;
			}
			set
			{
				if ((this._BirthDay != value))
				{
					this.OnBirthDayChanging(value);
					this.SendPropertyChanging();
					this._BirthDay = value;
					this.SendPropertyChanged("BirthDay");
					this.OnBirthDayChanged();
				}
			}
		}
		
		[Association(Name="Teacher_Account", Storage="_Accounts", OtherKey="TeacherID")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		[Association(Name="Teacher_GroupStudent", Storage="_GroupStudents", OtherKey="TeacherID")]
		public EntitySet<GroupStudent> GroupStudents
		{
			get
			{
				return this._GroupStudents;
			}
			set
			{
				this._GroupStudents.Assign(value);
			}
		}
		
		[Association(Name="Teacher_HistoryRoom", Storage="_HistoryRooms", OtherKey="TeacherID")]
		public EntitySet<HistoryRoom> HistoryRooms
		{
			get
			{
				return this._HistoryRooms;
			}
			set
			{
				this._HistoryRooms.Assign(value);
			}
		}
		
		[Association(Name="Chair_Teacher", Storage="_Chair", ThisKey="ChairID", IsForeignKey=true)]
		public Chair Chair
		{
			get
			{
				return this._Chair.Entity;
			}
			set
			{
				Chair previousValue = this._Chair.Entity;
				if (((previousValue != value) 
							|| (this._Chair.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Chair.Entity = null;
						previousValue.Teachers.Remove(this);
					}
					this._Chair.Entity = value;
					if ((value != null))
					{
						value.Teachers.Add(this);
						this._ChairID = value.ChairID;
					}
					else
					{
						this._ChairID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Chair");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = null;
		}
		
		private void attach_GroupStudents(GroupStudent entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = this;
		}
		
		private void detach_GroupStudents(GroupStudent entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = null;
		}
		
		private void attach_HistoryRooms(HistoryRoom entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = this;
		}
		
		private void detach_HistoryRooms(HistoryRoom entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = null;
		}
	}
	
	[Table(Name="dbo.TemporaryImformations")]
	public partial class TemporaryImformation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ComputerID;
		
		private string _ComputerCode;
		
		private string _EquipmentCode;
		
		private string _EquipmentName;
		
		private string _Firm;
		
		private string _Configuration;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnComputerIDChanging(int value);
    partial void OnComputerIDChanged();
    partial void OnComputerCodeChanging(string value);
    partial void OnComputerCodeChanged();
    partial void OnEquipmentCodeChanging(string value);
    partial void OnEquipmentCodeChanged();
    partial void OnEquipmentNameChanging(string value);
    partial void OnEquipmentNameChanged();
    partial void OnFirmChanging(string value);
    partial void OnFirmChanged();
    partial void OnConfigurationChanging(string value);
    partial void OnConfigurationChanged();
    #endregion
		
		public TemporaryImformation()
		{
			OnCreated();
		}
		
		[Column(Storage="_ComputerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ComputerID
		{
			get
			{
				return this._ComputerID;
			}
			set
			{
				if ((this._ComputerID != value))
				{
					this.OnComputerIDChanging(value);
					this.SendPropertyChanging();
					this._ComputerID = value;
					this.SendPropertyChanged("ComputerID");
					this.OnComputerIDChanged();
				}
			}
		}
		
		[Column(Storage="_ComputerCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ComputerCode
		{
			get
			{
				return this._ComputerCode;
			}
			set
			{
				if ((this._ComputerCode != value))
				{
					this.OnComputerCodeChanging(value);
					this.SendPropertyChanging();
					this._ComputerCode = value;
					this.SendPropertyChanged("ComputerCode");
					this.OnComputerCodeChanged();
				}
			}
		}
		
		[Column(Storage="_EquipmentCode", DbType="NVarChar(50)")]
		public string EquipmentCode
		{
			get
			{
				return this._EquipmentCode;
			}
			set
			{
				if ((this._EquipmentCode != value))
				{
					this.OnEquipmentCodeChanging(value);
					this.SendPropertyChanging();
					this._EquipmentCode = value;
					this.SendPropertyChanged("EquipmentCode");
					this.OnEquipmentCodeChanged();
				}
			}
		}
		
		[Column(Storage="_EquipmentName", DbType="NVarChar(50)")]
		public string EquipmentName
		{
			get
			{
				return this._EquipmentName;
			}
			set
			{
				if ((this._EquipmentName != value))
				{
					this.OnEquipmentNameChanging(value);
					this.SendPropertyChanging();
					this._EquipmentName = value;
					this.SendPropertyChanged("EquipmentName");
					this.OnEquipmentNameChanged();
				}
			}
		}
		
		[Column(Storage="_Firm", DbType="NVarChar(50)")]
		public string Firm
		{
			get
			{
				return this._Firm;
			}
			set
			{
				if ((this._Firm != value))
				{
					this.OnFirmChanging(value);
					this.SendPropertyChanging();
					this._Firm = value;
					this.SendPropertyChanged("Firm");
					this.OnFirmChanged();
				}
			}
		}
		
		[Column(Storage="_Configuration", DbType="NVarChar(50)")]
		public string Configuration
		{
			get
			{
				return this._Configuration;
			}
			set
			{
				if ((this._Configuration != value))
				{
					this.OnConfigurationChanging(value);
					this.SendPropertyChanging();
					this._Configuration = value;
					this.SendPropertyChanged("Configuration");
					this.OnConfigurationChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
